
11.begin_with_button_and_two_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003578  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000964  08003684  08003684  00013684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fe8  08003fe8  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08003fe8  08003fe8  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fe8  08003fe8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fe8  08003fe8  00013fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  20000020  08004010  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  08004010  00020578  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079dc  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016d8  00000000  00000000  00027a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  00029100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d0  00000000  00000000  00029960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b6d  00000000  00000000  0002a130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a01d  00000000  00000000  00040c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000819ae  00000000  00000000  0004acba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc668  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002174  00000000  00000000  000cc6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	0800366c 	.word	0x0800366c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	0800366c 	.word	0x0800366c

0800014c <clearmmenuonce>:

//------ GENERAL MENU OR FRONT PAGE STARTS HERE------------------//



void clearmmenuonce(){      // function for clearing screen once before entering main menu
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if (cleartempmmenu==1){
 8000150:	4b05      	ldr	r3, [pc, #20]	; (8000168 <clearmmenuonce+0x1c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <clearmmenuonce+0x16>
		cleartempmmenu=0;
 8000158:	4b03      	ldr	r3, [pc, #12]	; (8000168 <clearmmenuonce+0x1c>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		SSD1306_Clear();
 800015e:	f001 fbb2 	bl	80018c6 <SSD1306_Clear>
	}
}
 8000162:	bf00      	nop
 8000164:	bd80      	pop	{r7, pc}
 8000166:	bf00      	nop
 8000168:	2000009c 	.word	0x2000009c

0800016c <mmenucursorfnc>:



// cursor or pointer for selecting menu usnit keyword '#'
void mmenucursorfnc(void){
 800016c:	b580      	push	{r7, lr}
 800016e:	af00      	add	r7, sp, #0
    if(cursorbutton==1){
 8000170:	4b21      	ldr	r3, [pc, #132]	; (80001f8 <mmenucursorfnc+0x8c>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	2b01      	cmp	r3, #1
 8000176:	d108      	bne.n	800018a <mmenucursorfnc+0x1e>
  	  SSD1306_GotoXY(0,13);
 8000178:	210d      	movs	r1, #13
 800017a:	2000      	movs	r0, #0
 800017c:	f001 fae8 	bl	8001750 <SSD1306_GotoXY>
  	  SSD1306_Puts("#",&Font_7x10,1);
 8000180:	2201      	movs	r2, #1
 8000182:	491e      	ldr	r1, [pc, #120]	; (80001fc <mmenucursorfnc+0x90>)
 8000184:	481e      	ldr	r0, [pc, #120]	; (8000200 <mmenucursorfnc+0x94>)
 8000186:	f001 fb79 	bl	800187c <SSD1306_Puts>
    }
    if(cursorbutton==2){
 800018a:	4b1b      	ldr	r3, [pc, #108]	; (80001f8 <mmenucursorfnc+0x8c>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b02      	cmp	r3, #2
 8000190:	d108      	bne.n	80001a4 <mmenucursorfnc+0x38>
  	  SSD1306_GotoXY(0,26);
 8000192:	211a      	movs	r1, #26
 8000194:	2000      	movs	r0, #0
 8000196:	f001 fadb 	bl	8001750 <SSD1306_GotoXY>
  	  SSD1306_Puts("#",&Font_7x10,1);
 800019a:	2201      	movs	r2, #1
 800019c:	4917      	ldr	r1, [pc, #92]	; (80001fc <mmenucursorfnc+0x90>)
 800019e:	4818      	ldr	r0, [pc, #96]	; (8000200 <mmenucursorfnc+0x94>)
 80001a0:	f001 fb6c 	bl	800187c <SSD1306_Puts>
    }
    if(cursorbutton==3){
 80001a4:	4b14      	ldr	r3, [pc, #80]	; (80001f8 <mmenucursorfnc+0x8c>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	2b03      	cmp	r3, #3
 80001aa:	d108      	bne.n	80001be <mmenucursorfnc+0x52>
  	  SSD1306_GotoXY(0,39);
 80001ac:	2127      	movs	r1, #39	; 0x27
 80001ae:	2000      	movs	r0, #0
 80001b0:	f001 face 	bl	8001750 <SSD1306_GotoXY>
  	  SSD1306_Puts("#",&Font_7x10,1);
 80001b4:	2201      	movs	r2, #1
 80001b6:	4911      	ldr	r1, [pc, #68]	; (80001fc <mmenucursorfnc+0x90>)
 80001b8:	4811      	ldr	r0, [pc, #68]	; (8000200 <mmenucursorfnc+0x94>)
 80001ba:	f001 fb5f 	bl	800187c <SSD1306_Puts>
    }
    if(cursorbutton==4){
 80001be:	4b0e      	ldr	r3, [pc, #56]	; (80001f8 <mmenucursorfnc+0x8c>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	2b04      	cmp	r3, #4
 80001c4:	d108      	bne.n	80001d8 <mmenucursorfnc+0x6c>
  	  SSD1306_GotoXY(0,52);
 80001c6:	2134      	movs	r1, #52	; 0x34
 80001c8:	2000      	movs	r0, #0
 80001ca:	f001 fac1 	bl	8001750 <SSD1306_GotoXY>
  	  SSD1306_Puts("#",&Font_7x10,1);
 80001ce:	2201      	movs	r2, #1
 80001d0:	490a      	ldr	r1, [pc, #40]	; (80001fc <mmenucursorfnc+0x90>)
 80001d2:	480b      	ldr	r0, [pc, #44]	; (8000200 <mmenucursorfnc+0x94>)
 80001d4:	f001 fb52 	bl	800187c <SSD1306_Puts>
    }
    if(cursorbutton==5){
 80001d8:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <mmenucursorfnc+0x8c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2b05      	cmp	r3, #5
 80001de:	d108      	bne.n	80001f2 <mmenucursorfnc+0x86>
  	  SSD1306_GotoXY(0,51);
 80001e0:	2133      	movs	r1, #51	; 0x33
 80001e2:	2000      	movs	r0, #0
 80001e4:	f001 fab4 	bl	8001750 <SSD1306_GotoXY>
  	  SSD1306_Puts("#",&Font_7x10,1);
 80001e8:	2201      	movs	r2, #1
 80001ea:	4904      	ldr	r1, [pc, #16]	; (80001fc <mmenucursorfnc+0x90>)
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <mmenucursorfnc+0x94>)
 80001ee:	f001 fb45 	bl	800187c <SSD1306_Puts>
    }
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000090 	.word	0x20000090
 80001fc:	20000000 	.word	0x20000000
 8000200:	08003684 	.word	0x08003684

08000204 <general_menu>:

//MAIN MENU OR general front page
void general_menu(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	      // SSD1306_Clear();
	      clearmmenuonce();
 8000208:	f7ff ffa0 	bl	800014c <clearmmenuonce>
	      SSD1306_GotoXY(20, 0);
 800020c:	2100      	movs	r1, #0
 800020e:	2014      	movs	r0, #20
 8000210:	f001 fa9e 	bl	8001750 <SSD1306_GotoXY>
		  SSD1306_Puts("select menu-", &Font_7x10,1);
 8000214:	2201      	movs	r2, #1
 8000216:	4917      	ldr	r1, [pc, #92]	; (8000274 <general_menu+0x70>)
 8000218:	4817      	ldr	r0, [pc, #92]	; (8000278 <general_menu+0x74>)
 800021a:	f001 fb2f 	bl	800187c <SSD1306_Puts>

   	  	  SSD1306_GotoXY(0,13);
 800021e:	210d      	movs	r1, #13
 8000220:	2000      	movs	r0, #0
 8000222:	f001 fa95 	bl	8001750 <SSD1306_GotoXY>
   	  	  SSD1306_Puts("1.about  ",&Font_7x10,1);
 8000226:	2201      	movs	r2, #1
 8000228:	4912      	ldr	r1, [pc, #72]	; (8000274 <general_menu+0x70>)
 800022a:	4814      	ldr	r0, [pc, #80]	; (800027c <general_menu+0x78>)
 800022c:	f001 fb26 	bl	800187c <SSD1306_Puts>

   	  	  SSD1306_GotoXY(0,26);
 8000230:	211a      	movs	r1, #26
 8000232:	2000      	movs	r0, #0
 8000234:	f001 fa8c 	bl	8001750 <SSD1306_GotoXY>
   	  	  SSD1306_Puts("2.load status",&Font_7x10,1);        //KNOWN AS LOADS
 8000238:	2201      	movs	r2, #1
 800023a:	490e      	ldr	r1, [pc, #56]	; (8000274 <general_menu+0x70>)
 800023c:	4810      	ldr	r0, [pc, #64]	; (8000280 <general_menu+0x7c>)
 800023e:	f001 fb1d 	bl	800187c <SSD1306_Puts>

   	  	  SSD1306_GotoXY(0,39);
 8000242:	2127      	movs	r1, #39	; 0x27
 8000244:	2000      	movs	r0, #0
 8000246:	f001 fa83 	bl	8001750 <SSD1306_GotoXY>
   	  	  SSD1306_Puts("3.list of load",&Font_7x10,1);       // KNOWN AS CONFIG
 800024a:	2201      	movs	r2, #1
 800024c:	4909      	ldr	r1, [pc, #36]	; (8000274 <general_menu+0x70>)
 800024e:	480d      	ldr	r0, [pc, #52]	; (8000284 <general_menu+0x80>)
 8000250:	f001 fb14 	bl	800187c <SSD1306_Puts>

   	  	  SSD1306_GotoXY(0,52);
 8000254:	2134      	movs	r1, #52	; 0x34
 8000256:	2000      	movs	r0, #0
 8000258:	f001 fa7a 	bl	8001750 <SSD1306_GotoXY>
   	  	  SSD1306_Puts("4.profile",&Font_7x10,1);
 800025c:	2201      	movs	r2, #1
 800025e:	4905      	ldr	r1, [pc, #20]	; (8000274 <general_menu+0x70>)
 8000260:	4809      	ldr	r0, [pc, #36]	; (8000288 <general_menu+0x84>)
 8000262:	f001 fb0b 	bl	800187c <SSD1306_Puts>

   	  	  //SSD1306_GotoXY(0,51);
   	  	  //SSD1306_Puts("5.manual ",&Font_7x10,1);  //menu 5 has been deleted

   	  	  mmenucursorfnc();   // by this function, cursor or menu selction will work
 8000266:	f7ff ff81 	bl	800016c <mmenucursorfnc>
 	      SSD1306_UpdateScreen();
 800026a:	f001 f9cd 	bl	8001608 <SSD1306_UpdateScreen>
     }
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	20000000 	.word	0x20000000
 8000278:	08003688 	.word	0x08003688
 800027c:	08003698 	.word	0x08003698
 8000280:	080036a4 	.word	0x080036a4
 8000284:	080036b4 	.word	0x080036b4
 8000288:	080036c4 	.word	0x080036c4

0800028c <input_read_fnc>:

//------------------FUNCTION FOR GPIO INPUT STARTS HERE-------------//

//------function for reading input to show ON OFF status starts here---------//

void input_read_fnc(void){
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	if ((enterbutton==2) && (smcursobutton==1)){  //so that this ON or OFF can only been shown when the display is in ssubmenu page; ENTERBUTTON=2 means ssubmenu page
 8000290:	4b46      	ldr	r3, [pc, #280]	; (80003ac <input_read_fnc+0x120>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b02      	cmp	r3, #2
 8000296:	d11e      	bne.n	80002d6 <input_read_fnc+0x4a>
 8000298:	4b45      	ldr	r3, [pc, #276]	; (80003b0 <input_read_fnc+0x124>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d11a      	bne.n	80002d6 <input_read_fnc+0x4a>
		if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_8)==1){  // if input from A8 is positive
 80002a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a4:	4843      	ldr	r0, [pc, #268]	; (80003b4 <input_read_fnc+0x128>)
 80002a6:	f001 ff7b 	bl	80021a0 <HAL_GPIO_ReadPin>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d109      	bne.n	80002c4 <input_read_fnc+0x38>
			SSD1306_GotoXY(60, 13);
 80002b0:	210d      	movs	r1, #13
 80002b2:	203c      	movs	r0, #60	; 0x3c
 80002b4:	f001 fa4c 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("ON ",&Font_7x10,1);
 80002b8:	2201      	movs	r2, #1
 80002ba:	493f      	ldr	r1, [pc, #252]	; (80003b8 <input_read_fnc+0x12c>)
 80002bc:	483f      	ldr	r0, [pc, #252]	; (80003bc <input_read_fnc+0x130>)
 80002be:	f001 fadd 	bl	800187c <SSD1306_Puts>
 80002c2:	e008      	b.n	80002d6 <input_read_fnc+0x4a>
		}
		else {
			SSD1306_GotoXY(60,13);
 80002c4:	210d      	movs	r1, #13
 80002c6:	203c      	movs	r0, #60	; 0x3c
 80002c8:	f001 fa42 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("OFF", &Font_7x10, 1);
 80002cc:	2201      	movs	r2, #1
 80002ce:	493a      	ldr	r1, [pc, #232]	; (80003b8 <input_read_fnc+0x12c>)
 80002d0:	483b      	ldr	r0, [pc, #236]	; (80003c0 <input_read_fnc+0x134>)
 80002d2:	f001 fad3 	bl	800187c <SSD1306_Puts>
		}
	}
	if ((enterbutton==2) && (smcursobutton==2) ){  //so that this ON or OFF can only been shown when the display is in ssubmenu page; ENTERBUTTON=2 means ssubmenu page
 80002d6:	4b35      	ldr	r3, [pc, #212]	; (80003ac <input_read_fnc+0x120>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	2b02      	cmp	r3, #2
 80002dc:	d11e      	bne.n	800031c <input_read_fnc+0x90>
 80002de:	4b34      	ldr	r3, [pc, #208]	; (80003b0 <input_read_fnc+0x124>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b02      	cmp	r3, #2
 80002e4:	d11a      	bne.n	800031c <input_read_fnc+0x90>
		if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_9)==1){  // if input from A8 is positive
 80002e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ea:	4832      	ldr	r0, [pc, #200]	; (80003b4 <input_read_fnc+0x128>)
 80002ec:	f001 ff58 	bl	80021a0 <HAL_GPIO_ReadPin>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d109      	bne.n	800030a <input_read_fnc+0x7e>
			SSD1306_GotoXY(60, 13);
 80002f6:	210d      	movs	r1, #13
 80002f8:	203c      	movs	r0, #60	; 0x3c
 80002fa:	f001 fa29 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("ON ",&Font_7x10,1);
 80002fe:	2201      	movs	r2, #1
 8000300:	492d      	ldr	r1, [pc, #180]	; (80003b8 <input_read_fnc+0x12c>)
 8000302:	482e      	ldr	r0, [pc, #184]	; (80003bc <input_read_fnc+0x130>)
 8000304:	f001 faba 	bl	800187c <SSD1306_Puts>
 8000308:	e008      	b.n	800031c <input_read_fnc+0x90>
		}
		else {
			SSD1306_GotoXY(60,13);
 800030a:	210d      	movs	r1, #13
 800030c:	203c      	movs	r0, #60	; 0x3c
 800030e:	f001 fa1f 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("OFF", &Font_7x10, 1);
 8000312:	2201      	movs	r2, #1
 8000314:	4928      	ldr	r1, [pc, #160]	; (80003b8 <input_read_fnc+0x12c>)
 8000316:	482a      	ldr	r0, [pc, #168]	; (80003c0 <input_read_fnc+0x134>)
 8000318:	f001 fab0 	bl	800187c <SSD1306_Puts>
		}
	}
	if ((enterbutton==2) && (smcursobutton==3)){  //so that this ON or OFF can only been shown when the display is in ssubmenu page; ENTERBUTTON=2 means ssubmenu page
 800031c:	4b23      	ldr	r3, [pc, #140]	; (80003ac <input_read_fnc+0x120>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b02      	cmp	r3, #2
 8000322:	d11e      	bne.n	8000362 <input_read_fnc+0xd6>
 8000324:	4b22      	ldr	r3, [pc, #136]	; (80003b0 <input_read_fnc+0x124>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b03      	cmp	r3, #3
 800032a:	d11a      	bne.n	8000362 <input_read_fnc+0xd6>
		if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10)==1){  // if input from A8 is positive
 800032c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000330:	4820      	ldr	r0, [pc, #128]	; (80003b4 <input_read_fnc+0x128>)
 8000332:	f001 ff35 	bl	80021a0 <HAL_GPIO_ReadPin>
 8000336:	4603      	mov	r3, r0
 8000338:	2b01      	cmp	r3, #1
 800033a:	d109      	bne.n	8000350 <input_read_fnc+0xc4>
			SSD1306_GotoXY(60, 13);
 800033c:	210d      	movs	r1, #13
 800033e:	203c      	movs	r0, #60	; 0x3c
 8000340:	f001 fa06 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("ON ",&Font_7x10,1);
 8000344:	2201      	movs	r2, #1
 8000346:	491c      	ldr	r1, [pc, #112]	; (80003b8 <input_read_fnc+0x12c>)
 8000348:	481c      	ldr	r0, [pc, #112]	; (80003bc <input_read_fnc+0x130>)
 800034a:	f001 fa97 	bl	800187c <SSD1306_Puts>
 800034e:	e008      	b.n	8000362 <input_read_fnc+0xd6>
		}
		else {
			SSD1306_GotoXY(60,13);
 8000350:	210d      	movs	r1, #13
 8000352:	203c      	movs	r0, #60	; 0x3c
 8000354:	f001 f9fc 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("OFF", &Font_7x10, 1);
 8000358:	2201      	movs	r2, #1
 800035a:	4917      	ldr	r1, [pc, #92]	; (80003b8 <input_read_fnc+0x12c>)
 800035c:	4818      	ldr	r0, [pc, #96]	; (80003c0 <input_read_fnc+0x134>)
 800035e:	f001 fa8d 	bl	800187c <SSD1306_Puts>
		}
	}
	if ((enterbutton==2) && (smcursobutton==4)){  //so that this ON or OFF can only been shown when the display is in ssubmenu page; ENTERBUTTON=2 means ssubmenu page
 8000362:	4b12      	ldr	r3, [pc, #72]	; (80003ac <input_read_fnc+0x120>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2b02      	cmp	r3, #2
 8000368:	d11e      	bne.n	80003a8 <input_read_fnc+0x11c>
 800036a:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <input_read_fnc+0x124>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b04      	cmp	r3, #4
 8000370:	d11a      	bne.n	80003a8 <input_read_fnc+0x11c>
		if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_11)==1){  // if input from A8 is positive
 8000372:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000376:	480f      	ldr	r0, [pc, #60]	; (80003b4 <input_read_fnc+0x128>)
 8000378:	f001 ff12 	bl	80021a0 <HAL_GPIO_ReadPin>
 800037c:	4603      	mov	r3, r0
 800037e:	2b01      	cmp	r3, #1
 8000380:	d109      	bne.n	8000396 <input_read_fnc+0x10a>
			SSD1306_GotoXY(60, 13);
 8000382:	210d      	movs	r1, #13
 8000384:	203c      	movs	r0, #60	; 0x3c
 8000386:	f001 f9e3 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("ON ",&Font_7x10,1);
 800038a:	2201      	movs	r2, #1
 800038c:	490a      	ldr	r1, [pc, #40]	; (80003b8 <input_read_fnc+0x12c>)
 800038e:	480b      	ldr	r0, [pc, #44]	; (80003bc <input_read_fnc+0x130>)
 8000390:	f001 fa74 	bl	800187c <SSD1306_Puts>
		else {
			SSD1306_GotoXY(60,13);
			SSD1306_Puts("OFF", &Font_7x10, 1);
		}
	}
}
 8000394:	e008      	b.n	80003a8 <input_read_fnc+0x11c>
			SSD1306_GotoXY(60,13);
 8000396:	210d      	movs	r1, #13
 8000398:	203c      	movs	r0, #60	; 0x3c
 800039a:	f001 f9d9 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("OFF", &Font_7x10, 1);
 800039e:	2201      	movs	r2, #1
 80003a0:	4905      	ldr	r1, [pc, #20]	; (80003b8 <input_read_fnc+0x12c>)
 80003a2:	4807      	ldr	r0, [pc, #28]	; (80003c0 <input_read_fnc+0x134>)
 80003a4:	f001 fa6a 	bl	800187c <SSD1306_Puts>
}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000098 	.word	0x20000098
 80003b0:	20000094 	.word	0x20000094
 80003b4:	40010800 	.word	0x40010800
 80003b8:	20000000 	.word	0x20000000
 80003bc:	080036d0 	.word	0x080036d0
 80003c0:	080036d4 	.word	0x080036d4

080003c4 <sysontime>:
char sec44s[5],sec44m[5],sec44h[5];

int sec0s=0,sec0m=0,sec0h=0;                ////at 06-08-22 for showing system ontime too
char sec00s[5],sec00m[5],sec00h[5];

sysontime(void){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	itoa(sec0s,sec00s,10);         //THIS IS A FUNCITON THAT CONVERTS INT TYPE VALUE INTO CHAR TYPE VALUE
 80003c8:	4b22      	ldr	r3, [pc, #136]	; (8000454 <sysontime+0x90>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	220a      	movs	r2, #10
 80003ce:	4922      	ldr	r1, [pc, #136]	; (8000458 <sysontime+0x94>)
 80003d0:	4618      	mov	r0, r3
 80003d2:	f003 f8ff 	bl	80035d4 <itoa>
	itoa(sec0m,sec00m,10);
 80003d6:	4b21      	ldr	r3, [pc, #132]	; (800045c <sysontime+0x98>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	220a      	movs	r2, #10
 80003dc:	4920      	ldr	r1, [pc, #128]	; (8000460 <sysontime+0x9c>)
 80003de:	4618      	mov	r0, r3
 80003e0:	f003 f8f8 	bl	80035d4 <itoa>
	itoa(sec0h,sec00h,10);
 80003e4:	4b1f      	ldr	r3, [pc, #124]	; (8000464 <sysontime+0xa0>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	220a      	movs	r2, #10
 80003ea:	491f      	ldr	r1, [pc, #124]	; (8000468 <sysontime+0xa4>)
 80003ec:	4618      	mov	r0, r3
 80003ee:	f003 f8f1 	bl	80035d4 <itoa>
	SSD1306_GotoXY(93, 52);
 80003f2:	2134      	movs	r1, #52	; 0x34
 80003f4:	205d      	movs	r0, #93	; 0x5d
 80003f6:	f001 f9ab 	bl	8001750 <SSD1306_GotoXY>
	SSD1306_Puts(":", &Font_7x10, 1);      // : is a time portion divider
 80003fa:	2201      	movs	r2, #1
 80003fc:	491b      	ldr	r1, [pc, #108]	; (800046c <sysontime+0xa8>)
 80003fe:	481c      	ldr	r0, [pc, #112]	; (8000470 <sysontime+0xac>)
 8000400:	f001 fa3c 	bl	800187c <SSD1306_Puts>
	SSD1306_GotoXY(100, 52);
 8000404:	2134      	movs	r1, #52	; 0x34
 8000406:	2064      	movs	r0, #100	; 0x64
 8000408:	f001 f9a2 	bl	8001750 <SSD1306_GotoXY>
	SSD1306_Puts(sec00s, &Font_7x10, 1);
 800040c:	2201      	movs	r2, #1
 800040e:	4917      	ldr	r1, [pc, #92]	; (800046c <sysontime+0xa8>)
 8000410:	4811      	ldr	r0, [pc, #68]	; (8000458 <sysontime+0x94>)
 8000412:	f001 fa33 	bl	800187c <SSD1306_Puts>
	SSD1306_GotoXY(73, 52);
 8000416:	2134      	movs	r1, #52	; 0x34
 8000418:	2049      	movs	r0, #73	; 0x49
 800041a:	f001 f999 	bl	8001750 <SSD1306_GotoXY>
	SSD1306_Puts(":", &Font_7x10, 1);
 800041e:	2201      	movs	r2, #1
 8000420:	4912      	ldr	r1, [pc, #72]	; (800046c <sysontime+0xa8>)
 8000422:	4813      	ldr	r0, [pc, #76]	; (8000470 <sysontime+0xac>)
 8000424:	f001 fa2a 	bl	800187c <SSD1306_Puts>
	SSD1306_GotoXY(80, 52);
 8000428:	2134      	movs	r1, #52	; 0x34
 800042a:	2050      	movs	r0, #80	; 0x50
 800042c:	f001 f990 	bl	8001750 <SSD1306_GotoXY>
	SSD1306_Puts(sec00m, &Font_7x10, 1);
 8000430:	2201      	movs	r2, #1
 8000432:	490e      	ldr	r1, [pc, #56]	; (800046c <sysontime+0xa8>)
 8000434:	480a      	ldr	r0, [pc, #40]	; (8000460 <sysontime+0x9c>)
 8000436:	f001 fa21 	bl	800187c <SSD1306_Puts>
	SSD1306_GotoXY(60, 52);
 800043a:	2134      	movs	r1, #52	; 0x34
 800043c:	203c      	movs	r0, #60	; 0x3c
 800043e:	f001 f987 	bl	8001750 <SSD1306_GotoXY>
	SSD1306_Puts(sec00h, &Font_7x10, 1);
 8000442:	2201      	movs	r2, #1
 8000444:	4909      	ldr	r1, [pc, #36]	; (800046c <sysontime+0xa8>)
 8000446:	4808      	ldr	r0, [pc, #32]	; (8000468 <sysontime+0xa4>)
 8000448:	f001 fa18 	bl	800187c <SSD1306_Puts>
}
 800044c:	bf00      	nop
 800044e:	4618      	mov	r0, r3
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000134 	.word	0x20000134
 8000458:	20000140 	.word	0x20000140
 800045c:	20000138 	.word	0x20000138
 8000460:	20000148 	.word	0x20000148
 8000464:	2000013c 	.word	0x2000013c
 8000468:	20000150 	.word	0x20000150
 800046c:	20000000 	.word	0x20000000
 8000470:	080036d8 	.word	0x080036d8

08000474 <input_timer_read_fnc>:

//------------------------- ONTIME OF INPUT OR LOAD COUNTER STARTS HERE------------------//
void input_timer_read_fnc(void){                 //THE FUNCITON IS TO COUNT ONTIME LOAD ; THIS FUNCTION WILL WORK IN LINE 519 WITH PREVIOUSLY DECLARED input_read_fnc()
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	// in this function there are total of 4 part which will display ontime for each load

	//display setup for load=1 in 3rd page for showing time (as smcursorbutton==1)

	if ((enterbutton==2)&&(smcursobutton==1)){
 8000478:	4b98      	ldr	r3, [pc, #608]	; (80006dc <input_timer_read_fnc+0x268>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b02      	cmp	r3, #2
 800047e:	d147      	bne.n	8000510 <input_timer_read_fnc+0x9c>
 8000480:	4b97      	ldr	r3, [pc, #604]	; (80006e0 <input_timer_read_fnc+0x26c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d143      	bne.n	8000510 <input_timer_read_fnc+0x9c>

		itoa(sec1s,sec11s,10);         //THIS IS A FUNCITON THAT CONVERTS INT TYPE VALUE INTO CHAR TYPE VALUE
 8000488:	4b96      	ldr	r3, [pc, #600]	; (80006e4 <input_timer_read_fnc+0x270>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	220a      	movs	r2, #10
 800048e:	4996      	ldr	r1, [pc, #600]	; (80006e8 <input_timer_read_fnc+0x274>)
 8000490:	4618      	mov	r0, r3
 8000492:	f003 f89f 	bl	80035d4 <itoa>
		itoa(sec1m,sec11m,10);
 8000496:	4b95      	ldr	r3, [pc, #596]	; (80006ec <input_timer_read_fnc+0x278>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	220a      	movs	r2, #10
 800049c:	4994      	ldr	r1, [pc, #592]	; (80006f0 <input_timer_read_fnc+0x27c>)
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 f898 	bl	80035d4 <itoa>
		itoa(sec1h,sec11h,10);
 80004a4:	4b93      	ldr	r3, [pc, #588]	; (80006f4 <input_timer_read_fnc+0x280>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	220a      	movs	r2, #10
 80004aa:	4993      	ldr	r1, [pc, #588]	; (80006f8 <input_timer_read_fnc+0x284>)
 80004ac:	4618      	mov	r0, r3
 80004ae:	f003 f891 	bl	80035d4 <itoa>
		SSD1306_GotoXY(93, 26);
 80004b2:	211a      	movs	r1, #26
 80004b4:	205d      	movs	r0, #93	; 0x5d
 80004b6:	f001 f94b 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(":", &Font_7x10, 1);      // : is a time portion divider
 80004ba:	2201      	movs	r2, #1
 80004bc:	498f      	ldr	r1, [pc, #572]	; (80006fc <input_timer_read_fnc+0x288>)
 80004be:	4890      	ldr	r0, [pc, #576]	; (8000700 <input_timer_read_fnc+0x28c>)
 80004c0:	f001 f9dc 	bl	800187c <SSD1306_Puts>
		SSD1306_GotoXY(100, 26);
 80004c4:	211a      	movs	r1, #26
 80004c6:	2064      	movs	r0, #100	; 0x64
 80004c8:	f001 f942 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(sec11s, &Font_7x10, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	498b      	ldr	r1, [pc, #556]	; (80006fc <input_timer_read_fnc+0x288>)
 80004d0:	4885      	ldr	r0, [pc, #532]	; (80006e8 <input_timer_read_fnc+0x274>)
 80004d2:	f001 f9d3 	bl	800187c <SSD1306_Puts>
		SSD1306_GotoXY(73, 26);
 80004d6:	211a      	movs	r1, #26
 80004d8:	2049      	movs	r0, #73	; 0x49
 80004da:	f001 f939 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(":", &Font_7x10, 1);
 80004de:	2201      	movs	r2, #1
 80004e0:	4986      	ldr	r1, [pc, #536]	; (80006fc <input_timer_read_fnc+0x288>)
 80004e2:	4887      	ldr	r0, [pc, #540]	; (8000700 <input_timer_read_fnc+0x28c>)
 80004e4:	f001 f9ca 	bl	800187c <SSD1306_Puts>
		SSD1306_GotoXY(80, 26);
 80004e8:	211a      	movs	r1, #26
 80004ea:	2050      	movs	r0, #80	; 0x50
 80004ec:	f001 f930 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(sec11m, &Font_7x10, 1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	4982      	ldr	r1, [pc, #520]	; (80006fc <input_timer_read_fnc+0x288>)
 80004f4:	487e      	ldr	r0, [pc, #504]	; (80006f0 <input_timer_read_fnc+0x27c>)
 80004f6:	f001 f9c1 	bl	800187c <SSD1306_Puts>
		SSD1306_GotoXY(60, 26);
 80004fa:	211a      	movs	r1, #26
 80004fc:	203c      	movs	r0, #60	; 0x3c
 80004fe:	f001 f927 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(sec11h, &Font_7x10, 1);
 8000502:	2201      	movs	r2, #1
 8000504:	497d      	ldr	r1, [pc, #500]	; (80006fc <input_timer_read_fnc+0x288>)
 8000506:	487c      	ldr	r0, [pc, #496]	; (80006f8 <input_timer_read_fnc+0x284>)
 8000508:	f001 f9b8 	bl	800187c <SSD1306_Puts>

		sysontime();
 800050c:	f7ff ff5a 	bl	80003c4 <sysontime>
	}
	//display setup for load=2 in 3rd page for showing time (as smcursorbutton==2)

	if ((enterbutton==2)&&(smcursobutton==2)){      // ALL THOSE FOUR FUNCTIONS ARE QUITE SIMILAR
 8000510:	4b72      	ldr	r3, [pc, #456]	; (80006dc <input_timer_read_fnc+0x268>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b02      	cmp	r3, #2
 8000516:	d147      	bne.n	80005a8 <input_timer_read_fnc+0x134>
 8000518:	4b71      	ldr	r3, [pc, #452]	; (80006e0 <input_timer_read_fnc+0x26c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b02      	cmp	r3, #2
 800051e:	d143      	bne.n	80005a8 <input_timer_read_fnc+0x134>

		itoa(sec2s,sec22s,10);
 8000520:	4b78      	ldr	r3, [pc, #480]	; (8000704 <input_timer_read_fnc+0x290>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	220a      	movs	r2, #10
 8000526:	4978      	ldr	r1, [pc, #480]	; (8000708 <input_timer_read_fnc+0x294>)
 8000528:	4618      	mov	r0, r3
 800052a:	f003 f853 	bl	80035d4 <itoa>
		itoa(sec2m,sec22m,10);
 800052e:	4b77      	ldr	r3, [pc, #476]	; (800070c <input_timer_read_fnc+0x298>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	220a      	movs	r2, #10
 8000534:	4976      	ldr	r1, [pc, #472]	; (8000710 <input_timer_read_fnc+0x29c>)
 8000536:	4618      	mov	r0, r3
 8000538:	f003 f84c 	bl	80035d4 <itoa>
		itoa(sec2h,sec22h,10);
 800053c:	4b75      	ldr	r3, [pc, #468]	; (8000714 <input_timer_read_fnc+0x2a0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	220a      	movs	r2, #10
 8000542:	4975      	ldr	r1, [pc, #468]	; (8000718 <input_timer_read_fnc+0x2a4>)
 8000544:	4618      	mov	r0, r3
 8000546:	f003 f845 	bl	80035d4 <itoa>
		SSD1306_GotoXY(93, 26);
 800054a:	211a      	movs	r1, #26
 800054c:	205d      	movs	r0, #93	; 0x5d
 800054e:	f001 f8ff 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(":", &Font_7x10, 1);
 8000552:	2201      	movs	r2, #1
 8000554:	4969      	ldr	r1, [pc, #420]	; (80006fc <input_timer_read_fnc+0x288>)
 8000556:	486a      	ldr	r0, [pc, #424]	; (8000700 <input_timer_read_fnc+0x28c>)
 8000558:	f001 f990 	bl	800187c <SSD1306_Puts>
		SSD1306_GotoXY(100, 26);
 800055c:	211a      	movs	r1, #26
 800055e:	2064      	movs	r0, #100	; 0x64
 8000560:	f001 f8f6 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(sec22s, &Font_7x10, 1);
 8000564:	2201      	movs	r2, #1
 8000566:	4965      	ldr	r1, [pc, #404]	; (80006fc <input_timer_read_fnc+0x288>)
 8000568:	4867      	ldr	r0, [pc, #412]	; (8000708 <input_timer_read_fnc+0x294>)
 800056a:	f001 f987 	bl	800187c <SSD1306_Puts>
		SSD1306_GotoXY(73, 26);
 800056e:	211a      	movs	r1, #26
 8000570:	2049      	movs	r0, #73	; 0x49
 8000572:	f001 f8ed 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(":", &Font_7x10, 1);
 8000576:	2201      	movs	r2, #1
 8000578:	4960      	ldr	r1, [pc, #384]	; (80006fc <input_timer_read_fnc+0x288>)
 800057a:	4861      	ldr	r0, [pc, #388]	; (8000700 <input_timer_read_fnc+0x28c>)
 800057c:	f001 f97e 	bl	800187c <SSD1306_Puts>
		SSD1306_GotoXY(80, 26);
 8000580:	211a      	movs	r1, #26
 8000582:	2050      	movs	r0, #80	; 0x50
 8000584:	f001 f8e4 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(sec22m, &Font_7x10, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	495c      	ldr	r1, [pc, #368]	; (80006fc <input_timer_read_fnc+0x288>)
 800058c:	4860      	ldr	r0, [pc, #384]	; (8000710 <input_timer_read_fnc+0x29c>)
 800058e:	f001 f975 	bl	800187c <SSD1306_Puts>
		SSD1306_GotoXY(60, 26);
 8000592:	211a      	movs	r1, #26
 8000594:	203c      	movs	r0, #60	; 0x3c
 8000596:	f001 f8db 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(sec22h, &Font_7x10, 1);
 800059a:	2201      	movs	r2, #1
 800059c:	4957      	ldr	r1, [pc, #348]	; (80006fc <input_timer_read_fnc+0x288>)
 800059e:	485e      	ldr	r0, [pc, #376]	; (8000718 <input_timer_read_fnc+0x2a4>)
 80005a0:	f001 f96c 	bl	800187c <SSD1306_Puts>

		sysontime();
 80005a4:	f7ff ff0e 	bl	80003c4 <sysontime>
	}
	//display setup for load=3 in 3rd page for showing time (as smcursorbutton==3)

	if ((enterbutton==2)&&(smcursobutton==3)){
 80005a8:	4b4c      	ldr	r3, [pc, #304]	; (80006dc <input_timer_read_fnc+0x268>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d147      	bne.n	8000640 <input_timer_read_fnc+0x1cc>
 80005b0:	4b4b      	ldr	r3, [pc, #300]	; (80006e0 <input_timer_read_fnc+0x26c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	d143      	bne.n	8000640 <input_timer_read_fnc+0x1cc>

		itoa(sec3s,sec33s,10);
 80005b8:	4b58      	ldr	r3, [pc, #352]	; (800071c <input_timer_read_fnc+0x2a8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	220a      	movs	r2, #10
 80005be:	4958      	ldr	r1, [pc, #352]	; (8000720 <input_timer_read_fnc+0x2ac>)
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 f807 	bl	80035d4 <itoa>
		itoa(sec3m,sec33m,10);
 80005c6:	4b57      	ldr	r3, [pc, #348]	; (8000724 <input_timer_read_fnc+0x2b0>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	220a      	movs	r2, #10
 80005cc:	4956      	ldr	r1, [pc, #344]	; (8000728 <input_timer_read_fnc+0x2b4>)
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 f800 	bl	80035d4 <itoa>
		itoa(sec3h,sec33h,10);
 80005d4:	4b55      	ldr	r3, [pc, #340]	; (800072c <input_timer_read_fnc+0x2b8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	220a      	movs	r2, #10
 80005da:	4955      	ldr	r1, [pc, #340]	; (8000730 <input_timer_read_fnc+0x2bc>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 fff9 	bl	80035d4 <itoa>
		SSD1306_GotoXY(93, 26);
 80005e2:	211a      	movs	r1, #26
 80005e4:	205d      	movs	r0, #93	; 0x5d
 80005e6:	f001 f8b3 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(":", &Font_7x10, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	4943      	ldr	r1, [pc, #268]	; (80006fc <input_timer_read_fnc+0x288>)
 80005ee:	4844      	ldr	r0, [pc, #272]	; (8000700 <input_timer_read_fnc+0x28c>)
 80005f0:	f001 f944 	bl	800187c <SSD1306_Puts>
		SSD1306_GotoXY(100, 26);
 80005f4:	211a      	movs	r1, #26
 80005f6:	2064      	movs	r0, #100	; 0x64
 80005f8:	f001 f8aa 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(sec33s, &Font_7x10, 1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	493f      	ldr	r1, [pc, #252]	; (80006fc <input_timer_read_fnc+0x288>)
 8000600:	4847      	ldr	r0, [pc, #284]	; (8000720 <input_timer_read_fnc+0x2ac>)
 8000602:	f001 f93b 	bl	800187c <SSD1306_Puts>
		SSD1306_GotoXY(73, 26);
 8000606:	211a      	movs	r1, #26
 8000608:	2049      	movs	r0, #73	; 0x49
 800060a:	f001 f8a1 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(":", &Font_7x10, 1);
 800060e:	2201      	movs	r2, #1
 8000610:	493a      	ldr	r1, [pc, #232]	; (80006fc <input_timer_read_fnc+0x288>)
 8000612:	483b      	ldr	r0, [pc, #236]	; (8000700 <input_timer_read_fnc+0x28c>)
 8000614:	f001 f932 	bl	800187c <SSD1306_Puts>
		SSD1306_GotoXY(80, 26);
 8000618:	211a      	movs	r1, #26
 800061a:	2050      	movs	r0, #80	; 0x50
 800061c:	f001 f898 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(sec33m, &Font_7x10, 1);
 8000620:	2201      	movs	r2, #1
 8000622:	4936      	ldr	r1, [pc, #216]	; (80006fc <input_timer_read_fnc+0x288>)
 8000624:	4840      	ldr	r0, [pc, #256]	; (8000728 <input_timer_read_fnc+0x2b4>)
 8000626:	f001 f929 	bl	800187c <SSD1306_Puts>
		SSD1306_GotoXY(60, 26);
 800062a:	211a      	movs	r1, #26
 800062c:	203c      	movs	r0, #60	; 0x3c
 800062e:	f001 f88f 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(sec33h, &Font_7x10, 1);
 8000632:	2201      	movs	r2, #1
 8000634:	4931      	ldr	r1, [pc, #196]	; (80006fc <input_timer_read_fnc+0x288>)
 8000636:	483e      	ldr	r0, [pc, #248]	; (8000730 <input_timer_read_fnc+0x2bc>)
 8000638:	f001 f920 	bl	800187c <SSD1306_Puts>

		sysontime();
 800063c:	f7ff fec2 	bl	80003c4 <sysontime>
	}

	//display setup for load=4 in 3rd page for showing time (as smcursorbutton==4)

	if ((enterbutton==2)&&(smcursobutton==4)){
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <input_timer_read_fnc+0x268>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b02      	cmp	r3, #2
 8000646:	d147      	bne.n	80006d8 <input_timer_read_fnc+0x264>
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <input_timer_read_fnc+0x26c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b04      	cmp	r3, #4
 800064e:	d143      	bne.n	80006d8 <input_timer_read_fnc+0x264>

		itoa(sec4s,sec44s,10);
 8000650:	4b38      	ldr	r3, [pc, #224]	; (8000734 <input_timer_read_fnc+0x2c0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	220a      	movs	r2, #10
 8000656:	4938      	ldr	r1, [pc, #224]	; (8000738 <input_timer_read_fnc+0x2c4>)
 8000658:	4618      	mov	r0, r3
 800065a:	f002 ffbb 	bl	80035d4 <itoa>
		itoa(sec4m,sec44m,10);
 800065e:	4b37      	ldr	r3, [pc, #220]	; (800073c <input_timer_read_fnc+0x2c8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	220a      	movs	r2, #10
 8000664:	4936      	ldr	r1, [pc, #216]	; (8000740 <input_timer_read_fnc+0x2cc>)
 8000666:	4618      	mov	r0, r3
 8000668:	f002 ffb4 	bl	80035d4 <itoa>
		itoa(sec4h,sec44h,10);
 800066c:	4b35      	ldr	r3, [pc, #212]	; (8000744 <input_timer_read_fnc+0x2d0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	220a      	movs	r2, #10
 8000672:	4935      	ldr	r1, [pc, #212]	; (8000748 <input_timer_read_fnc+0x2d4>)
 8000674:	4618      	mov	r0, r3
 8000676:	f002 ffad 	bl	80035d4 <itoa>
		SSD1306_GotoXY(93, 26);
 800067a:	211a      	movs	r1, #26
 800067c:	205d      	movs	r0, #93	; 0x5d
 800067e:	f001 f867 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(":", &Font_7x10, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	491d      	ldr	r1, [pc, #116]	; (80006fc <input_timer_read_fnc+0x288>)
 8000686:	481e      	ldr	r0, [pc, #120]	; (8000700 <input_timer_read_fnc+0x28c>)
 8000688:	f001 f8f8 	bl	800187c <SSD1306_Puts>
		SSD1306_GotoXY(100, 26);
 800068c:	211a      	movs	r1, #26
 800068e:	2064      	movs	r0, #100	; 0x64
 8000690:	f001 f85e 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(sec44s, &Font_7x10, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	4919      	ldr	r1, [pc, #100]	; (80006fc <input_timer_read_fnc+0x288>)
 8000698:	4827      	ldr	r0, [pc, #156]	; (8000738 <input_timer_read_fnc+0x2c4>)
 800069a:	f001 f8ef 	bl	800187c <SSD1306_Puts>
		SSD1306_GotoXY(73, 26);
 800069e:	211a      	movs	r1, #26
 80006a0:	2049      	movs	r0, #73	; 0x49
 80006a2:	f001 f855 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(":", &Font_7x10, 1);
 80006a6:	2201      	movs	r2, #1
 80006a8:	4914      	ldr	r1, [pc, #80]	; (80006fc <input_timer_read_fnc+0x288>)
 80006aa:	4815      	ldr	r0, [pc, #84]	; (8000700 <input_timer_read_fnc+0x28c>)
 80006ac:	f001 f8e6 	bl	800187c <SSD1306_Puts>
		SSD1306_GotoXY(80, 26);
 80006b0:	211a      	movs	r1, #26
 80006b2:	2050      	movs	r0, #80	; 0x50
 80006b4:	f001 f84c 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(sec44m, &Font_7x10, 1);
 80006b8:	2201      	movs	r2, #1
 80006ba:	4910      	ldr	r1, [pc, #64]	; (80006fc <input_timer_read_fnc+0x288>)
 80006bc:	4820      	ldr	r0, [pc, #128]	; (8000740 <input_timer_read_fnc+0x2cc>)
 80006be:	f001 f8dd 	bl	800187c <SSD1306_Puts>
		SSD1306_GotoXY(60, 26);
 80006c2:	211a      	movs	r1, #26
 80006c4:	203c      	movs	r0, #60	; 0x3c
 80006c6:	f001 f843 	bl	8001750 <SSD1306_GotoXY>
		SSD1306_Puts(sec44h, &Font_7x10, 1);
 80006ca:	2201      	movs	r2, #1
 80006cc:	490b      	ldr	r1, [pc, #44]	; (80006fc <input_timer_read_fnc+0x288>)
 80006ce:	481e      	ldr	r0, [pc, #120]	; (8000748 <input_timer_read_fnc+0x2d4>)
 80006d0:	f001 f8d4 	bl	800187c <SSD1306_Puts>

		sysontime();
 80006d4:	f7ff fe76 	bl	80003c4 <sysontime>
	}

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000098 	.word	0x20000098
 80006e0:	20000094 	.word	0x20000094
 80006e4:	200000a4 	.word	0x200000a4
 80006e8:	200000b0 	.word	0x200000b0
 80006ec:	200000a8 	.word	0x200000a8
 80006f0:	200000b8 	.word	0x200000b8
 80006f4:	200000ac 	.word	0x200000ac
 80006f8:	200000c0 	.word	0x200000c0
 80006fc:	20000000 	.word	0x20000000
 8000700:	080036d8 	.word	0x080036d8
 8000704:	200000c8 	.word	0x200000c8
 8000708:	200000d4 	.word	0x200000d4
 800070c:	200000cc 	.word	0x200000cc
 8000710:	200000dc 	.word	0x200000dc
 8000714:	200000d0 	.word	0x200000d0
 8000718:	200000e4 	.word	0x200000e4
 800071c:	200000ec 	.word	0x200000ec
 8000720:	200000f8 	.word	0x200000f8
 8000724:	200000f0 	.word	0x200000f0
 8000728:	20000100 	.word	0x20000100
 800072c:	200000f4 	.word	0x200000f4
 8000730:	20000108 	.word	0x20000108
 8000734:	20000110 	.word	0x20000110
 8000738:	2000011c 	.word	0x2000011c
 800073c:	20000114 	.word	0x20000114
 8000740:	20000124 	.word	0x20000124
 8000744:	20000118 	.word	0x20000118
 8000748:	2000012c 	.word	0x2000012c

0800074c <cleardisplay_once>:

int cleart = 1;   // this variable is taken to count two ENTERBUTTON PRESS or B0 interrupt
int cleartemp=0;    // this button changes for every two ENTERBUTTON PRESS

//function for clearing (SSD1306_Clear()) only once before writing sub-menu; otherwise it will just blinks
void cleardisplay_once(void){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	if(cleartemp==1){
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <cleardisplay_once+0x1c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d104      	bne.n	8000762 <cleardisplay_once+0x16>
		SSD1306_Clear();
 8000758:	f001 f8b5 	bl	80018c6 <SSD1306_Clear>
		cleartemp=0;
 800075c:	4b02      	ldr	r3, [pc, #8]	; (8000768 <cleardisplay_once+0x1c>)
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
	}
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000158 	.word	0x20000158

0800076c <about>:

//RAW FUNCTION declaration for all the sub-page or sub-menu under main menu//
//YOU CAN ADD ALL THE CODE HERE THAT WILL SHOW THE MONITORING STATUS

void about(void){                 //1st sub menu
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	cleardisplay_once();
 8000770:	f7ff ffec 	bl	800074c <cleardisplay_once>
	SSD1306_GotoXY(0,0);
 8000774:	2100      	movs	r1, #0
 8000776:	2000      	movs	r0, #0
 8000778:	f000 ffea 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("This project shows ",&Font_7x10,1);
 800077c:	2201      	movs	r2, #1
 800077e:	4916      	ldr	r1, [pc, #88]	; (80007d8 <about+0x6c>)
 8000780:	4816      	ldr	r0, [pc, #88]	; (80007dc <about+0x70>)
 8000782:	f001 f87b 	bl	800187c <SSD1306_Puts>
    SSD1306_GotoXY(0,13);
 8000786:	210d      	movs	r1, #13
 8000788:	2000      	movs	r0, #0
 800078a:	f000 ffe1 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("the basic of embed",&Font_7x10,1);
 800078e:	2201      	movs	r2, #1
 8000790:	4911      	ldr	r1, [pc, #68]	; (80007d8 <about+0x6c>)
 8000792:	4813      	ldr	r0, [pc, #76]	; (80007e0 <about+0x74>)
 8000794:	f001 f872 	bl	800187c <SSD1306_Puts>
    SSD1306_GotoXY(0,26);
 8000798:	211a      	movs	r1, #26
 800079a:	2000      	movs	r0, #0
 800079c:	f000 ffd8 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("-ded OS that can be",&Font_7x10,1);
 80007a0:	2201      	movs	r2, #1
 80007a2:	490d      	ldr	r1, [pc, #52]	; (80007d8 <about+0x6c>)
 80007a4:	480f      	ldr	r0, [pc, #60]	; (80007e4 <about+0x78>)
 80007a6:	f001 f869 	bl	800187c <SSD1306_Puts>
    SSD1306_GotoXY(0,39);
 80007aa:	2127      	movs	r1, #39	; 0x27
 80007ac:	2000      	movs	r0, #0
 80007ae:	f000 ffcf 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("used in monitoring",&Font_7x10,1);
 80007b2:	2201      	movs	r2, #1
 80007b4:	4908      	ldr	r1, [pc, #32]	; (80007d8 <about+0x6c>)
 80007b6:	480c      	ldr	r0, [pc, #48]	; (80007e8 <about+0x7c>)
 80007b8:	f001 f860 	bl	800187c <SSD1306_Puts>
    SSD1306_GotoXY(0,52);
 80007bc:	2134      	movs	r1, #52	; 0x34
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 ffc6 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("purpose of loads ",&Font_7x10,1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	4904      	ldr	r1, [pc, #16]	; (80007d8 <about+0x6c>)
 80007c8:	4808      	ldr	r0, [pc, #32]	; (80007ec <about+0x80>)
 80007ca:	f001 f857 	bl	800187c <SSD1306_Puts>
    SSD1306_UpdateScreen();
 80007ce:	f000 ff1b 	bl	8001608 <SSD1306_UpdateScreen>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000000 	.word	0x20000000
 80007dc:	080036dc 	.word	0x080036dc
 80007e0:	080036f0 	.word	0x080036f0
 80007e4:	08003704 	.word	0x08003704
 80007e8:	08003718 	.word	0x08003718
 80007ec:	0800372c 	.word	0x0800372c

080007f0 <smenucursorfnc_2>:

//-------------sub menu cursor selector function-------//
// this will select the load from list from load_status(2nd submenu) fnc//
void smenucursorfnc_2(){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	if (cursorbutton==2){
 80007f4:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <smenucursorfnc_2+0x80>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d136      	bne.n	800086a <smenucursorfnc_2+0x7a>
		if(smcursobutton==1){
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <smenucursorfnc_2+0x84>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d109      	bne.n	8000818 <smenucursorfnc_2+0x28>
			SSD1306_GotoXY(0, 13);
 8000804:	210d      	movs	r1, #13
 8000806:	2000      	movs	r0, #0
 8000808:	f000 ffa2 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("#", &Font_7x10,1);
 800080c:	2201      	movs	r2, #1
 800080e:	491a      	ldr	r1, [pc, #104]	; (8000878 <smenucursorfnc_2+0x88>)
 8000810:	481a      	ldr	r0, [pc, #104]	; (800087c <smenucursorfnc_2+0x8c>)
 8000812:	f001 f833 	bl	800187c <SSD1306_Puts>
		else if(smcursobutton==4){
			SSD1306_GotoXY(0, 52);
			SSD1306_Puts("#", &Font_7x10,1);
		}
	}
}
 8000816:	e028      	b.n	800086a <smenucursorfnc_2+0x7a>
		else if(smcursobutton==2){
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <smenucursorfnc_2+0x84>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b02      	cmp	r3, #2
 800081e:	d109      	bne.n	8000834 <smenucursorfnc_2+0x44>
			SSD1306_GotoXY(0, 26);
 8000820:	211a      	movs	r1, #26
 8000822:	2000      	movs	r0, #0
 8000824:	f000 ff94 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("#", &Font_7x10,1);
 8000828:	2201      	movs	r2, #1
 800082a:	4913      	ldr	r1, [pc, #76]	; (8000878 <smenucursorfnc_2+0x88>)
 800082c:	4813      	ldr	r0, [pc, #76]	; (800087c <smenucursorfnc_2+0x8c>)
 800082e:	f001 f825 	bl	800187c <SSD1306_Puts>
}
 8000832:	e01a      	b.n	800086a <smenucursorfnc_2+0x7a>
		else if(smcursobutton==3){
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <smenucursorfnc_2+0x84>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b03      	cmp	r3, #3
 800083a:	d109      	bne.n	8000850 <smenucursorfnc_2+0x60>
			SSD1306_GotoXY(0, 39);
 800083c:	2127      	movs	r1, #39	; 0x27
 800083e:	2000      	movs	r0, #0
 8000840:	f000 ff86 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("#", &Font_7x10,1);
 8000844:	2201      	movs	r2, #1
 8000846:	490c      	ldr	r1, [pc, #48]	; (8000878 <smenucursorfnc_2+0x88>)
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <smenucursorfnc_2+0x8c>)
 800084a:	f001 f817 	bl	800187c <SSD1306_Puts>
}
 800084e:	e00c      	b.n	800086a <smenucursorfnc_2+0x7a>
		else if(smcursobutton==4){
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <smenucursorfnc_2+0x84>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b04      	cmp	r3, #4
 8000856:	d108      	bne.n	800086a <smenucursorfnc_2+0x7a>
			SSD1306_GotoXY(0, 52);
 8000858:	2134      	movs	r1, #52	; 0x34
 800085a:	2000      	movs	r0, #0
 800085c:	f000 ff78 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("#", &Font_7x10,1);
 8000860:	2201      	movs	r2, #1
 8000862:	4905      	ldr	r1, [pc, #20]	; (8000878 <smenucursorfnc_2+0x88>)
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <smenucursorfnc_2+0x8c>)
 8000866:	f001 f809 	bl	800187c <SSD1306_Puts>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000090 	.word	0x20000090
 8000874:	20000094 	.word	0x20000094
 8000878:	20000000 	.word	0x20000000
 800087c:	08003684 	.word	0x08003684

08000880 <load_status>:


void load_status(void){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	cleardisplay_once();
 8000884:	f7ff ff62 	bl	800074c <cleardisplay_once>
	SSD1306_GotoXY(0,0);
 8000888:	2100      	movs	r1, #0
 800088a:	2000      	movs	r0, #0
 800088c:	f000 ff60 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts(" load status:",&Font_7x10,1);
 8000890:	2201      	movs	r2, #1
 8000892:	4917      	ldr	r1, [pc, #92]	; (80008f0 <load_status+0x70>)
 8000894:	4817      	ldr	r0, [pc, #92]	; (80008f4 <load_status+0x74>)
 8000896:	f000 fff1 	bl	800187c <SSD1306_Puts>
    SSD1306_GotoXY(0,13);
 800089a:	210d      	movs	r1, #13
 800089c:	2000      	movs	r0, #0
 800089e:	f000 ff57 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("1.load_1",&Font_7x10,1);
 80008a2:	2201      	movs	r2, #1
 80008a4:	4912      	ldr	r1, [pc, #72]	; (80008f0 <load_status+0x70>)
 80008a6:	4814      	ldr	r0, [pc, #80]	; (80008f8 <load_status+0x78>)
 80008a8:	f000 ffe8 	bl	800187c <SSD1306_Puts>
    SSD1306_GotoXY(0,26);
 80008ac:	211a      	movs	r1, #26
 80008ae:	2000      	movs	r0, #0
 80008b0:	f000 ff4e 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("2.load_2",&Font_7x10,1);
 80008b4:	2201      	movs	r2, #1
 80008b6:	490e      	ldr	r1, [pc, #56]	; (80008f0 <load_status+0x70>)
 80008b8:	4810      	ldr	r0, [pc, #64]	; (80008fc <load_status+0x7c>)
 80008ba:	f000 ffdf 	bl	800187c <SSD1306_Puts>
    SSD1306_GotoXY(0,39);
 80008be:	2127      	movs	r1, #39	; 0x27
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 ff45 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("3.load_3",&Font_7x10,1);
 80008c6:	2201      	movs	r2, #1
 80008c8:	4909      	ldr	r1, [pc, #36]	; (80008f0 <load_status+0x70>)
 80008ca:	480d      	ldr	r0, [pc, #52]	; (8000900 <load_status+0x80>)
 80008cc:	f000 ffd6 	bl	800187c <SSD1306_Puts>
    SSD1306_GotoXY(0,52);
 80008d0:	2134      	movs	r1, #52	; 0x34
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 ff3c 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("4.load_4",&Font_7x10,1);
 80008d8:	2201      	movs	r2, #1
 80008da:	4905      	ldr	r1, [pc, #20]	; (80008f0 <load_status+0x70>)
 80008dc:	4809      	ldr	r0, [pc, #36]	; (8000904 <load_status+0x84>)
 80008de:	f000 ffcd 	bl	800187c <SSD1306_Puts>
    smenucursorfnc_2();
 80008e2:	f7ff ff85 	bl	80007f0 <smenucursorfnc_2>
    SSD1306_UpdateScreen();
 80008e6:	f000 fe8f 	bl	8001608 <SSD1306_UpdateScreen>
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	08003740 	.word	0x08003740
 80008f8:	08003750 	.word	0x08003750
 80008fc:	0800375c 	.word	0x0800375c
 8000900:	08003768 	.word	0x08003768
 8000904:	08003774 	.word	0x08003774

08000908 <onoffinlist_of_load>:

//---------------3rd submenu (for cursorbutton=3) listofloads starts here---------------//

// function for showing ON OFF status(for cursorbutton=3) in 3rd submenu (list of load)

void onoffinlist_of_load(void){          //THIS FUNCTION IS SIMILAR TO input_read_fnc()
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	if((enterbutton==1) && (cursorbutton==3)){
 800090c:	4b3a      	ldr	r3, [pc, #232]	; (80009f8 <onoffinlist_of_load+0xf0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d16f      	bne.n	80009f4 <onoffinlist_of_load+0xec>
 8000914:	4b39      	ldr	r3, [pc, #228]	; (80009fc <onoffinlist_of_load+0xf4>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b03      	cmp	r3, #3
 800091a:	d16b      	bne.n	80009f4 <onoffinlist_of_load+0xec>
		if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_8)==1){  // if input from A8 is positive
 800091c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000920:	4837      	ldr	r0, [pc, #220]	; (8000a00 <onoffinlist_of_load+0xf8>)
 8000922:	f001 fc3d 	bl	80021a0 <HAL_GPIO_ReadPin>
 8000926:	4603      	mov	r3, r0
 8000928:	2b01      	cmp	r3, #1
 800092a:	d109      	bne.n	8000940 <onoffinlist_of_load+0x38>
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,1);
			SSD1306_GotoXY(60, 13);
 800092c:	210d      	movs	r1, #13
 800092e:	203c      	movs	r0, #60	; 0x3c
 8000930:	f000 ff0e 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("ON ",&Font_7x10,1);
 8000934:	2201      	movs	r2, #1
 8000936:	4933      	ldr	r1, [pc, #204]	; (8000a04 <onoffinlist_of_load+0xfc>)
 8000938:	4833      	ldr	r0, [pc, #204]	; (8000a08 <onoffinlist_of_load+0x100>)
 800093a:	f000 ff9f 	bl	800187c <SSD1306_Puts>
 800093e:	e008      	b.n	8000952 <onoffinlist_of_load+0x4a>
		}
		else {
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,0);
			SSD1306_GotoXY(60,13);
 8000940:	210d      	movs	r1, #13
 8000942:	203c      	movs	r0, #60	; 0x3c
 8000944:	f000 ff04 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("OFF", &Font_7x10, 1);
 8000948:	2201      	movs	r2, #1
 800094a:	492e      	ldr	r1, [pc, #184]	; (8000a04 <onoffinlist_of_load+0xfc>)
 800094c:	482f      	ldr	r0, [pc, #188]	; (8000a0c <onoffinlist_of_load+0x104>)
 800094e:	f000 ff95 	bl	800187c <SSD1306_Puts>
		}
		if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_9)==1){  // if input from A9 is positive
 8000952:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000956:	482a      	ldr	r0, [pc, #168]	; (8000a00 <onoffinlist_of_load+0xf8>)
 8000958:	f001 fc22 	bl	80021a0 <HAL_GPIO_ReadPin>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d109      	bne.n	8000976 <onoffinlist_of_load+0x6e>
			SSD1306_GotoXY(60, 26);
 8000962:	211a      	movs	r1, #26
 8000964:	203c      	movs	r0, #60	; 0x3c
 8000966:	f000 fef3 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("ON ",&Font_7x10,1);
 800096a:	2201      	movs	r2, #1
 800096c:	4925      	ldr	r1, [pc, #148]	; (8000a04 <onoffinlist_of_load+0xfc>)
 800096e:	4826      	ldr	r0, [pc, #152]	; (8000a08 <onoffinlist_of_load+0x100>)
 8000970:	f000 ff84 	bl	800187c <SSD1306_Puts>
 8000974:	e008      	b.n	8000988 <onoffinlist_of_load+0x80>
		}
		else {
			SSD1306_GotoXY(60,26);
 8000976:	211a      	movs	r1, #26
 8000978:	203c      	movs	r0, #60	; 0x3c
 800097a:	f000 fee9 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("OFF", &Font_7x10, 1);
 800097e:	2201      	movs	r2, #1
 8000980:	4920      	ldr	r1, [pc, #128]	; (8000a04 <onoffinlist_of_load+0xfc>)
 8000982:	4822      	ldr	r0, [pc, #136]	; (8000a0c <onoffinlist_of_load+0x104>)
 8000984:	f000 ff7a 	bl	800187c <SSD1306_Puts>
		}
		if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10)==1){  // if input from A10 is positive
 8000988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098c:	481c      	ldr	r0, [pc, #112]	; (8000a00 <onoffinlist_of_load+0xf8>)
 800098e:	f001 fc07 	bl	80021a0 <HAL_GPIO_ReadPin>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	d109      	bne.n	80009ac <onoffinlist_of_load+0xa4>
			SSD1306_GotoXY(60, 39);
 8000998:	2127      	movs	r1, #39	; 0x27
 800099a:	203c      	movs	r0, #60	; 0x3c
 800099c:	f000 fed8 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("ON ",&Font_7x10,1);
 80009a0:	2201      	movs	r2, #1
 80009a2:	4918      	ldr	r1, [pc, #96]	; (8000a04 <onoffinlist_of_load+0xfc>)
 80009a4:	4818      	ldr	r0, [pc, #96]	; (8000a08 <onoffinlist_of_load+0x100>)
 80009a6:	f000 ff69 	bl	800187c <SSD1306_Puts>
 80009aa:	e008      	b.n	80009be <onoffinlist_of_load+0xb6>
		}
		else {
			SSD1306_GotoXY(60,39);
 80009ac:	2127      	movs	r1, #39	; 0x27
 80009ae:	203c      	movs	r0, #60	; 0x3c
 80009b0:	f000 fece 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("OFF", &Font_7x10, 1);
 80009b4:	2201      	movs	r2, #1
 80009b6:	4913      	ldr	r1, [pc, #76]	; (8000a04 <onoffinlist_of_load+0xfc>)
 80009b8:	4814      	ldr	r0, [pc, #80]	; (8000a0c <onoffinlist_of_load+0x104>)
 80009ba:	f000 ff5f 	bl	800187c <SSD1306_Puts>
		}
		if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_11)==1){  // if input from A11 is positive
 80009be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c2:	480f      	ldr	r0, [pc, #60]	; (8000a00 <onoffinlist_of_load+0xf8>)
 80009c4:	f001 fbec 	bl	80021a0 <HAL_GPIO_ReadPin>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d109      	bne.n	80009e2 <onoffinlist_of_load+0xda>
			SSD1306_GotoXY(60, 52);
 80009ce:	2134      	movs	r1, #52	; 0x34
 80009d0:	203c      	movs	r0, #60	; 0x3c
 80009d2:	f000 febd 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("ON ",&Font_7x10,1);
 80009d6:	2201      	movs	r2, #1
 80009d8:	490a      	ldr	r1, [pc, #40]	; (8000a04 <onoffinlist_of_load+0xfc>)
 80009da:	480b      	ldr	r0, [pc, #44]	; (8000a08 <onoffinlist_of_load+0x100>)
 80009dc:	f000 ff4e 	bl	800187c <SSD1306_Puts>
		else {
			SSD1306_GotoXY(60,52);
			SSD1306_Puts("OFF", &Font_7x10, 1);
		}
	}
}
 80009e0:	e008      	b.n	80009f4 <onoffinlist_of_load+0xec>
			SSD1306_GotoXY(60,52);
 80009e2:	2134      	movs	r1, #52	; 0x34
 80009e4:	203c      	movs	r0, #60	; 0x3c
 80009e6:	f000 feb3 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("OFF", &Font_7x10, 1);
 80009ea:	2201      	movs	r2, #1
 80009ec:	4905      	ldr	r1, [pc, #20]	; (8000a04 <onoffinlist_of_load+0xfc>)
 80009ee:	4807      	ldr	r0, [pc, #28]	; (8000a0c <onoffinlist_of_load+0x104>)
 80009f0:	f000 ff44 	bl	800187c <SSD1306_Puts>
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000098 	.word	0x20000098
 80009fc:	20000090 	.word	0x20000090
 8000a00:	40010800 	.word	0x40010800
 8000a04:	20000000 	.word	0x20000000
 8000a08:	080036d0 	.word	0x080036d0
 8000a0c:	080036d4 	.word	0x080036d4

08000a10 <list_of_load>:


//  function for 3rd submenu  cursorbutton=3; list of load
void list_of_load(void){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	cleardisplay_once();
 8000a14:	f7ff fe9a 	bl	800074c <cleardisplay_once>
	SSD1306_GotoXY(10,0);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	200a      	movs	r0, #10
 8000a1c:	f000 fe98 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("list of load:",&Font_7x10,1);
 8000a20:	2201      	movs	r2, #1
 8000a22:	4917      	ldr	r1, [pc, #92]	; (8000a80 <list_of_load+0x70>)
 8000a24:	4817      	ldr	r0, [pc, #92]	; (8000a84 <list_of_load+0x74>)
 8000a26:	f000 ff29 	bl	800187c <SSD1306_Puts>
    SSD1306_GotoXY(0,13);
 8000a2a:	210d      	movs	r1, #13
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 fe8f 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("1.load_1",&Font_7x10,1);
 8000a32:	2201      	movs	r2, #1
 8000a34:	4912      	ldr	r1, [pc, #72]	; (8000a80 <list_of_load+0x70>)
 8000a36:	4814      	ldr	r0, [pc, #80]	; (8000a88 <list_of_load+0x78>)
 8000a38:	f000 ff20 	bl	800187c <SSD1306_Puts>
    SSD1306_GotoXY(0,26);
 8000a3c:	211a      	movs	r1, #26
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 fe86 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("2.load_2",&Font_7x10,1);
 8000a44:	2201      	movs	r2, #1
 8000a46:	490e      	ldr	r1, [pc, #56]	; (8000a80 <list_of_load+0x70>)
 8000a48:	4810      	ldr	r0, [pc, #64]	; (8000a8c <list_of_load+0x7c>)
 8000a4a:	f000 ff17 	bl	800187c <SSD1306_Puts>
    SSD1306_GotoXY(0,39);
 8000a4e:	2127      	movs	r1, #39	; 0x27
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 fe7d 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("3.load_3",&Font_7x10,1);
 8000a56:	2201      	movs	r2, #1
 8000a58:	4909      	ldr	r1, [pc, #36]	; (8000a80 <list_of_load+0x70>)
 8000a5a:	480d      	ldr	r0, [pc, #52]	; (8000a90 <list_of_load+0x80>)
 8000a5c:	f000 ff0e 	bl	800187c <SSD1306_Puts>
    SSD1306_GotoXY(0,52);
 8000a60:	2134      	movs	r1, #52	; 0x34
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 fe74 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("4.load_4",&Font_7x10,1);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4905      	ldr	r1, [pc, #20]	; (8000a80 <list_of_load+0x70>)
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <list_of_load+0x84>)
 8000a6e:	f000 ff05 	bl	800187c <SSD1306_Puts>
    onoffinlist_of_load();
 8000a72:	f7ff ff49 	bl	8000908 <onoffinlist_of_load>
    SSD1306_UpdateScreen();
 8000a76:	f000 fdc7 	bl	8001608 <SSD1306_UpdateScreen>
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000000 	.word	0x20000000
 8000a84:	08003780 	.word	0x08003780
 8000a88:	08003750 	.word	0x08003750
 8000a8c:	0800375c 	.word	0x0800375c
 8000a90:	08003768 	.word	0x08003768
 8000a94:	08003774 	.word	0x08003774

08000a98 <profile>:


//function for 4th submenu; for cursorbutton=4
void profile(void){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	cleardisplay_once();
 8000a9c:	f7ff fe56 	bl	800074c <cleardisplay_once>
	SSD1306_GotoXY(0,0);
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 fe54 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("number of loads- 4",&Font_7x10,1);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	4916      	ldr	r1, [pc, #88]	; (8000b04 <profile+0x6c>)
 8000aac:	4816      	ldr	r0, [pc, #88]	; (8000b08 <profile+0x70>)
 8000aae:	f000 fee5 	bl	800187c <SSD1306_Puts>
    SSD1306_GotoXY(0,13);
 8000ab2:	210d      	movs	r1, #13
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 fe4b 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("controlling modes:",&Font_7x10,1);
 8000aba:	2201      	movs	r2, #1
 8000abc:	4911      	ldr	r1, [pc, #68]	; (8000b04 <profile+0x6c>)
 8000abe:	4813      	ldr	r0, [pc, #76]	; (8000b0c <profile+0x74>)
 8000ac0:	f000 fedc 	bl	800187c <SSD1306_Puts>
    SSD1306_GotoXY(0,26);
 8000ac4:	211a      	movs	r1, #26
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 fe42 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("   1.WI-FI",&Font_7x10,1);
 8000acc:	2201      	movs	r2, #1
 8000ace:	490d      	ldr	r1, [pc, #52]	; (8000b04 <profile+0x6c>)
 8000ad0:	480f      	ldr	r0, [pc, #60]	; (8000b10 <profile+0x78>)
 8000ad2:	f000 fed3 	bl	800187c <SSD1306_Puts>
    SSD1306_GotoXY(0,39);
 8000ad6:	2127      	movs	r1, #39	; 0x27
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f000 fe39 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("   2.IR remote",&Font_7x10,1);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4908      	ldr	r1, [pc, #32]	; (8000b04 <profile+0x6c>)
 8000ae2:	480c      	ldr	r0, [pc, #48]	; (8000b14 <profile+0x7c>)
 8000ae4:	f000 feca 	bl	800187c <SSD1306_Puts>
    SSD1306_GotoXY(0,52);
 8000ae8:	2134      	movs	r1, #52	; 0x34
 8000aea:	2000      	movs	r0, #0
 8000aec:	f000 fe30 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("manually - button ",&Font_7x10,1);
 8000af0:	2201      	movs	r2, #1
 8000af2:	4904      	ldr	r1, [pc, #16]	; (8000b04 <profile+0x6c>)
 8000af4:	4808      	ldr	r0, [pc, #32]	; (8000b18 <profile+0x80>)
 8000af6:	f000 fec1 	bl	800187c <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8000afa:	f000 fd85 	bl	8001608 <SSD1306_UpdateScreen>
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000000 	.word	0x20000000
 8000b08:	08003790 	.word	0x08003790
 8000b0c:	080037a4 	.word	0x080037a4
 8000b10:	080037b8 	.word	0x080037b8
 8000b14:	080037c4 	.word	0x080037c4
 8000b18:	080037d4 	.word	0x080037d4

08000b1c <manual>:
void manual(void){               //sub menu for 5th option ; THIS ONE HAS BEEN IGNORED
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	cleardisplay_once();
 8000b20:	f7ff fe14 	bl	800074c <cleardisplay_once>
	SSD1306_GotoXY(3,17);
 8000b24:	2111      	movs	r1, #17
 8000b26:	2003      	movs	r0, #3
 8000b28:	f000 fe12 	bl	8001750 <SSD1306_GotoXY>
    SSD1306_Puts("5.this is manual",&Font_7x10,1);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4904      	ldr	r1, [pc, #16]	; (8000b40 <manual+0x24>)
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <manual+0x28>)
 8000b32:	f000 fea3 	bl	800187c <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8000b36:	f000 fd67 	bl	8001608 <SSD1306_UpdateScreen>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000000 	.word	0x20000000
 8000b44:	080037e8 	.word	0x080037e8

08000b48 <sub_menu>:




//FINAL SUBMENU FUNCIOTN; THIS WILL SHOW ANY SUBMENU ACCORDING TO (cursorbutton=..) THE SELECTED ONE FROM MENU
void sub_menu(void){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    if(cursorbutton==1){
 8000b4c:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <sub_menu+0x6c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d105      	bne.n	8000b60 <sub_menu+0x18>
    	if(enterbutton==1){
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <sub_menu+0x70>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d101      	bne.n	8000b60 <sub_menu+0x18>
    		about();
 8000b5c:	f7ff fe06 	bl	800076c <about>
    	}
    }
    if(cursorbutton==2){
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <sub_menu+0x6c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d105      	bne.n	8000b74 <sub_menu+0x2c>
    	if(enterbutton==1){
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <sub_menu+0x70>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d101      	bne.n	8000b74 <sub_menu+0x2c>
    		load_status();
 8000b70:	f7ff fe86 	bl	8000880 <load_status>
    	}
    }
    if(cursorbutton==3){
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <sub_menu+0x6c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	d105      	bne.n	8000b88 <sub_menu+0x40>
    	if(enterbutton==1){
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <sub_menu+0x70>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d101      	bne.n	8000b88 <sub_menu+0x40>
    		list_of_load();         // LIST OF LOAD WILL BE APPEARED FOR THIS FUNCTION
 8000b84:	f7ff ff44 	bl	8000a10 <list_of_load>
    	}
    }
    if(cursorbutton==4){
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <sub_menu+0x6c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	d105      	bne.n	8000b9c <sub_menu+0x54>
    	if(enterbutton==1){
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <sub_menu+0x70>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d101      	bne.n	8000b9c <sub_menu+0x54>
    		profile();
 8000b98:	f7ff ff7e 	bl	8000a98 <profile>
    	}
    }
    if(cursorbutton==5){             //THIS ONE HAS BEEN IGNORED
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <sub_menu+0x6c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b05      	cmp	r3, #5
 8000ba2:	d105      	bne.n	8000bb0 <sub_menu+0x68>
    	if(enterbutton==1){
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <sub_menu+0x70>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d101      	bne.n	8000bb0 <sub_menu+0x68>
    			manual();
 8000bac:	f7ff ffb6 	bl	8000b1c <manual>
    	}
    }

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000090 	.word	0x20000090
 8000bb8:	20000098 	.word	0x20000098

08000bbc <clearssmenuonce>:


//-------------------FUNCTION FOR SSUBMENU STARTS HERE-----------------//


void clearssmenuonce(void){  //for clearing the screen
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	if (cleartempssmenu==1){
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <clearssmenuonce+0x1c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d104      	bne.n	8000bd2 <clearssmenuonce+0x16>
		cleartempssmenu=0;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <clearssmenuonce+0x1c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
		SSD1306_Clear();
 8000bce:	f000 fe7a 	bl	80018c6 <SSD1306_Clear>
	}
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200000a0 	.word	0x200000a0

08000bdc <s_sub_menu>:




void s_sub_menu(){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	if ((enterbutton==2)&&(cursorbutton==2)){  // enterbutton=2 means it is in 3rd page(started from 0); cursorbutton 2 load_status selected in main menu
 8000be0:	4b5f      	ldr	r3, [pc, #380]	; (8000d60 <s_sub_menu+0x184>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	f040 80b9 	bne.w	8000d5c <s_sub_menu+0x180>
 8000bea:	4b5e      	ldr	r3, [pc, #376]	; (8000d64 <s_sub_menu+0x188>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	f040 80b4 	bne.w	8000d5c <s_sub_menu+0x180>
		if(smcursobutton==1){
 8000bf4:	4b5c      	ldr	r3, [pc, #368]	; (8000d68 <s_sub_menu+0x18c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d127      	bne.n	8000c4c <s_sub_menu+0x70>
			clearssmenuonce();
 8000bfc:	f7ff ffde 	bl	8000bbc <clearssmenuonce>
			//SSD1306_Clear();
			SSD1306_GotoXY(0,13);
 8000c00:	210d      	movs	r1, #13
 8000c02:	2000      	movs	r0, #0
 8000c04:	f000 fda4 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("load 1:",&Font_7x10, 1);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4958      	ldr	r1, [pc, #352]	; (8000d6c <s_sub_menu+0x190>)
 8000c0c:	4858      	ldr	r0, [pc, #352]	; (8000d70 <s_sub_menu+0x194>)
 8000c0e:	f000 fe35 	bl	800187c <SSD1306_Puts>
			SSD1306_GotoXY(0,26);
 8000c12:	211a      	movs	r1, #26
 8000c14:	2000      	movs	r0, #0
 8000c16:	f000 fd9b 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("ontime:",&Font_7x10, 1);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4953      	ldr	r1, [pc, #332]	; (8000d6c <s_sub_menu+0x190>)
 8000c1e:	4855      	ldr	r0, [pc, #340]	; (8000d74 <s_sub_menu+0x198>)
 8000c20:	f000 fe2c 	bl	800187c <SSD1306_Puts>

                                               //at 06-08-22 for showing system ontime too
            SSD1306_GotoXY(0,39);
 8000c24:	2127      	movs	r1, #39	; 0x27
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 fd92 	bl	8001750 <SSD1306_GotoXY>
            SSD1306_Puts("system",&Font_7x10, 1);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	494f      	ldr	r1, [pc, #316]	; (8000d6c <s_sub_menu+0x190>)
 8000c30:	4851      	ldr	r0, [pc, #324]	; (8000d78 <s_sub_menu+0x19c>)
 8000c32:	f000 fe23 	bl	800187c <SSD1306_Puts>
            SSD1306_GotoXY(0,52);
 8000c36:	2134      	movs	r1, #52	; 0x34
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f000 fd89 	bl	8001750 <SSD1306_GotoXY>
            SSD1306_Puts("ontime:",&Font_7x10, 1);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	494a      	ldr	r1, [pc, #296]	; (8000d6c <s_sub_menu+0x190>)
 8000c42:	484c      	ldr	r0, [pc, #304]	; (8000d74 <s_sub_menu+0x198>)
 8000c44:	f000 fe1a 	bl	800187c <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8000c48:	f000 fcde 	bl	8001608 <SSD1306_UpdateScreen>
		}
		if(smcursobutton==2){
 8000c4c:	4b46      	ldr	r3, [pc, #280]	; (8000d68 <s_sub_menu+0x18c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d127      	bne.n	8000ca4 <s_sub_menu+0xc8>
			clearssmenuonce();
 8000c54:	f7ff ffb2 	bl	8000bbc <clearssmenuonce>
			SSD1306_GotoXY(0,13);
 8000c58:	210d      	movs	r1, #13
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f000 fd78 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("load 2:",&Font_7x10, 1);
 8000c60:	2201      	movs	r2, #1
 8000c62:	4942      	ldr	r1, [pc, #264]	; (8000d6c <s_sub_menu+0x190>)
 8000c64:	4845      	ldr	r0, [pc, #276]	; (8000d7c <s_sub_menu+0x1a0>)
 8000c66:	f000 fe09 	bl	800187c <SSD1306_Puts>
			SSD1306_GotoXY(0,26);
 8000c6a:	211a      	movs	r1, #26
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f000 fd6f 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("ontime:",&Font_7x10, 1);
 8000c72:	2201      	movs	r2, #1
 8000c74:	493d      	ldr	r1, [pc, #244]	; (8000d6c <s_sub_menu+0x190>)
 8000c76:	483f      	ldr	r0, [pc, #252]	; (8000d74 <s_sub_menu+0x198>)
 8000c78:	f000 fe00 	bl	800187c <SSD1306_Puts>

                               //at 06-08-22 for showing system ontime too
            SSD1306_GotoXY(0,39);
 8000c7c:	2127      	movs	r1, #39	; 0x27
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f000 fd66 	bl	8001750 <SSD1306_GotoXY>
            SSD1306_Puts("system",&Font_7x10, 1);
 8000c84:	2201      	movs	r2, #1
 8000c86:	4939      	ldr	r1, [pc, #228]	; (8000d6c <s_sub_menu+0x190>)
 8000c88:	483b      	ldr	r0, [pc, #236]	; (8000d78 <s_sub_menu+0x19c>)
 8000c8a:	f000 fdf7 	bl	800187c <SSD1306_Puts>
            SSD1306_GotoXY(0,52);
 8000c8e:	2134      	movs	r1, #52	; 0x34
 8000c90:	2000      	movs	r0, #0
 8000c92:	f000 fd5d 	bl	8001750 <SSD1306_GotoXY>
            SSD1306_Puts("ontime:",&Font_7x10, 1);
 8000c96:	2201      	movs	r2, #1
 8000c98:	4934      	ldr	r1, [pc, #208]	; (8000d6c <s_sub_menu+0x190>)
 8000c9a:	4836      	ldr	r0, [pc, #216]	; (8000d74 <s_sub_menu+0x198>)
 8000c9c:	f000 fdee 	bl	800187c <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8000ca0:	f000 fcb2 	bl	8001608 <SSD1306_UpdateScreen>
		}
		if(smcursobutton==3){
 8000ca4:	4b30      	ldr	r3, [pc, #192]	; (8000d68 <s_sub_menu+0x18c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b03      	cmp	r3, #3
 8000caa:	d127      	bne.n	8000cfc <s_sub_menu+0x120>
			clearssmenuonce();
 8000cac:	f7ff ff86 	bl	8000bbc <clearssmenuonce>
			//SSD1306_Clear();
			SSD1306_GotoXY(0,13);
 8000cb0:	210d      	movs	r1, #13
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 fd4c 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("load 3:",&Font_7x10, 1);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	492c      	ldr	r1, [pc, #176]	; (8000d6c <s_sub_menu+0x190>)
 8000cbc:	4830      	ldr	r0, [pc, #192]	; (8000d80 <s_sub_menu+0x1a4>)
 8000cbe:	f000 fddd 	bl	800187c <SSD1306_Puts>
			SSD1306_GotoXY(0,26);
 8000cc2:	211a      	movs	r1, #26
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 fd43 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("ontime:",&Font_7x10, 1);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4927      	ldr	r1, [pc, #156]	; (8000d6c <s_sub_menu+0x190>)
 8000cce:	4829      	ldr	r0, [pc, #164]	; (8000d74 <s_sub_menu+0x198>)
 8000cd0:	f000 fdd4 	bl	800187c <SSD1306_Puts>

            //at 06-08-22 for showing system ontime too
            SSD1306_GotoXY(0,39);
 8000cd4:	2127      	movs	r1, #39	; 0x27
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f000 fd3a 	bl	8001750 <SSD1306_GotoXY>
            SSD1306_Puts("system",&Font_7x10, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4923      	ldr	r1, [pc, #140]	; (8000d6c <s_sub_menu+0x190>)
 8000ce0:	4825      	ldr	r0, [pc, #148]	; (8000d78 <s_sub_menu+0x19c>)
 8000ce2:	f000 fdcb 	bl	800187c <SSD1306_Puts>
            SSD1306_GotoXY(0,52);
 8000ce6:	2134      	movs	r1, #52	; 0x34
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f000 fd31 	bl	8001750 <SSD1306_GotoXY>
            SSD1306_Puts("ontime:",&Font_7x10, 1);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	491e      	ldr	r1, [pc, #120]	; (8000d6c <s_sub_menu+0x190>)
 8000cf2:	4820      	ldr	r0, [pc, #128]	; (8000d74 <s_sub_menu+0x198>)
 8000cf4:	f000 fdc2 	bl	800187c <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8000cf8:	f000 fc86 	bl	8001608 <SSD1306_UpdateScreen>
		}
		if(smcursobutton==4){
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <s_sub_menu+0x18c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b04      	cmp	r3, #4
 8000d02:	d127      	bne.n	8000d54 <s_sub_menu+0x178>
			clearssmenuonce();
 8000d04:	f7ff ff5a 	bl	8000bbc <clearssmenuonce>
			SSD1306_GotoXY(0,13);
 8000d08:	210d      	movs	r1, #13
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 fd20 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("load 4:",&Font_7x10, 1);
 8000d10:	2201      	movs	r2, #1
 8000d12:	4916      	ldr	r1, [pc, #88]	; (8000d6c <s_sub_menu+0x190>)
 8000d14:	481b      	ldr	r0, [pc, #108]	; (8000d84 <s_sub_menu+0x1a8>)
 8000d16:	f000 fdb1 	bl	800187c <SSD1306_Puts>
			SSD1306_GotoXY(0,26);
 8000d1a:	211a      	movs	r1, #26
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f000 fd17 	bl	8001750 <SSD1306_GotoXY>
			SSD1306_Puts("ontime:",&Font_7x10, 1);
 8000d22:	2201      	movs	r2, #1
 8000d24:	4911      	ldr	r1, [pc, #68]	; (8000d6c <s_sub_menu+0x190>)
 8000d26:	4813      	ldr	r0, [pc, #76]	; (8000d74 <s_sub_menu+0x198>)
 8000d28:	f000 fda8 	bl	800187c <SSD1306_Puts>

                                //at 06-08-22 for showing system ontime too
            SSD1306_GotoXY(0,39);
 8000d2c:	2127      	movs	r1, #39	; 0x27
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f000 fd0e 	bl	8001750 <SSD1306_GotoXY>
            SSD1306_Puts("system",&Font_7x10, 1);
 8000d34:	2201      	movs	r2, #1
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <s_sub_menu+0x190>)
 8000d38:	480f      	ldr	r0, [pc, #60]	; (8000d78 <s_sub_menu+0x19c>)
 8000d3a:	f000 fd9f 	bl	800187c <SSD1306_Puts>
            SSD1306_GotoXY(0,52);
 8000d3e:	2134      	movs	r1, #52	; 0x34
 8000d40:	2000      	movs	r0, #0
 8000d42:	f000 fd05 	bl	8001750 <SSD1306_GotoXY>
            SSD1306_Puts("ontime:",&Font_7x10, 1);
 8000d46:	2201      	movs	r2, #1
 8000d48:	4908      	ldr	r1, [pc, #32]	; (8000d6c <s_sub_menu+0x190>)
 8000d4a:	480a      	ldr	r0, [pc, #40]	; (8000d74 <s_sub_menu+0x198>)
 8000d4c:	f000 fd96 	bl	800187c <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8000d50:	f000 fc5a 	bl	8001608 <SSD1306_UpdateScreen>
		}
		input_read_fnc();  // this will show the show the individual ON OFF status of each load
 8000d54:	f7ff fa9a 	bl	800028c <input_read_fnc>
		input_timer_read_fnc();   // this function will cover how to show the on time of INDIVIDUAL LOAD like prev. fnc input_read_fnc();
 8000d58:	f7ff fb8c 	bl	8000474 <input_timer_read_fnc>
	}
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000098 	.word	0x20000098
 8000d64:	20000090 	.word	0x20000090
 8000d68:	20000094 	.word	0x20000094
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	080037fc 	.word	0x080037fc
 8000d74:	08003804 	.word	0x08003804
 8000d78:	0800380c 	.word	0x0800380c
 8000d7c:	08003814 	.word	0x08003814
 8000d80:	0800381c 	.word	0x0800381c
 8000d84:	08003824 	.word	0x08003824

08000d88 <main>:


//------------------- MAIN FUNCTION OF THE CODE STARTS HERE--------------//

int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  HAL_Init();
 8000d8c:	f000 ff14 	bl	8001bb8 <HAL_Init>
  SystemClock_Config();
 8000d90:	f000 f824 	bl	8000ddc <SystemClock_Config>
  MX_GPIO_Init();
 8000d94:	f000 f88c 	bl	8000eb0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d98:	f000 f85c 	bl	8000e54 <MX_I2C1_Init>
  SSD1306_Init();
 8000d9c:	f000 fb70 	bl	8001480 <SSD1306_Init>
  while (1)
  {
	  //input_read_fnc();
	 	  	  if(enterbutton==0){
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <main+0x4c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <main+0x26>
	 	  	  general_menu(); //CALLING THE FUCTION WHICH WILL PRINT THE ALL MENU IN THE SCREEN
 8000da8:	f7ff fa2c 	bl	8000204 <general_menu>
 8000dac:	e7f8      	b.n	8000da0 <main+0x18>
	 	  	  }
	 	  	  else if(enterbutton==1){
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <main+0x4c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d102      	bne.n	8000dbc <main+0x34>
	 	  		  sub_menu();     //calling the function for sub menu
 8000db6:	f7ff fec7 	bl	8000b48 <sub_menu>
 8000dba:	e7f1      	b.n	8000da0 <main+0x18>
	 	  	  }
	 	  	  else if(enterbutton==2){
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <main+0x4c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d1ed      	bne.n	8000da0 <main+0x18>
	 	  		  if(cursorbutton==2){
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <main+0x50>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d1e9      	bne.n	8000da0 <main+0x18>
	 	  			  s_sub_menu();
 8000dcc:	f7ff ff06 	bl	8000bdc <s_sub_menu>
	 	  	  if(enterbutton==0){
 8000dd0:	e7e6      	b.n	8000da0 <main+0x18>
 8000dd2:	bf00      	nop
 8000dd4:	20000098 	.word	0x20000098
 8000dd8:	20000090 	.word	0x20000090

08000ddc <SystemClock_Config>:

//------------------- MAIN FUNCTION OF THE CODE ENDS HERE--------------//


void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b090      	sub	sp, #64	; 0x40
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 0318 	add.w	r3, r7, #24
 8000de6:	2228      	movs	r2, #40	; 0x28
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f002 fbf4 	bl	80035d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e02:	2301      	movs	r3, #1
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e06:	2310      	movs	r3, #16
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0e:	f107 0318 	add.w	r3, r7, #24
 8000e12:	4618      	mov	r0, r3
 8000e14:	f001 ff9c 	bl	8002d50 <HAL_RCC_OscConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e1e:	f000 fb29 	bl	8001474 <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e22:	230f      	movs	r3, #15
 8000e24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 fa0a 	bl	8003254 <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e46:	f000 fb15 	bl	8001474 <Error_Handler>
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3740      	adds	r7, #64	; 0x40
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <MX_I2C1_Init>:
static void MX_I2C1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e5a:	4a13      	ldr	r2, [pc, #76]	; (8000ea8 <MX_I2C1_Init+0x54>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e60:	4a12      	ldr	r2, [pc, #72]	; (8000eac <MX_I2C1_Init+0x58>)
 8000e62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <MX_I2C1_Init+0x50>)
 8000e92:	f001 f9e5 	bl	8002260 <HAL_I2C_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e9c:	f000 faea 	bl	8001474 <Error_Handler>
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000003c 	.word	0x2000003c
 8000ea8:	40005400 	.word	0x40005400
 8000eac:	00061a80 	.word	0x00061a80

08000eb0 <MX_GPIO_Init>:
static void MX_GPIO_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	f107 0310 	add.w	r3, r7, #16
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec4:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <MX_GPIO_Init+0xf0>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a35      	ldr	r2, [pc, #212]	; (8000fa0 <MX_GPIO_Init+0xf0>)
 8000eca:	f043 0320 	orr.w	r3, r3, #32
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <MX_GPIO_Init+0xf0>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0320 	and.w	r3, r3, #32
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <MX_GPIO_Init+0xf0>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a2f      	ldr	r2, [pc, #188]	; (8000fa0 <MX_GPIO_Init+0xf0>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <MX_GPIO_Init+0xf0>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef4:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <MX_GPIO_Init+0xf0>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a29      	ldr	r2, [pc, #164]	; (8000fa0 <MX_GPIO_Init+0xf0>)
 8000efa:	f043 0308 	orr.w	r3, r3, #8
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <MX_GPIO_Init+0xf0>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f640 7116 	movw	r1, #3862	; 0xf16
 8000f12:	4824      	ldr	r0, [pc, #144]	; (8000fa4 <MX_GPIO_Init+0xf4>)
 8000f14:	f001 f95b 	bl	80021ce <HAL_GPIO_WritePin>




  /*Configure GPIO pins : PA1 PA2 */    //work as general purpose OUTPUT
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8000f18:	2316      	movs	r3, #22
 8000f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	481d      	ldr	r0, [pc, #116]	; (8000fa4 <MX_GPIO_Init+0xf4>)
 8000f30:	f000 ffb2 	bl	8001e98 <HAL_GPIO_Init>


  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */   //work as general purpse INPUT
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000f34:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0310 	add.w	r3, r7, #16
 8000f46:	4619      	mov	r1, r3
 8000f48:	4816      	ldr	r0, [pc, #88]	; (8000fa4 <MX_GPIO_Init+0xf4>)
 8000f4a:	f000 ffa5 	bl	8001e98 <HAL_GPIO_Init>


  /*Configure GPIO pins : PB0 PB1 */   //work as interrupt pin
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000f4e:	230b      	movs	r3, #11
 8000f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_GPIO_Init+0xf8>)
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4812      	ldr	r0, [pc, #72]	; (8000fac <MX_GPIO_Init+0xfc>)
 8000f62:	f000 ff99 	bl	8001e98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/   // another portion to configure interrupt buttton
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2006      	movs	r0, #6
 8000f6c:	f000 ff5d 	bl	8001e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f70:	2006      	movs	r0, #6
 8000f72:	f000 ff76 	bl	8001e62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2007      	movs	r0, #7
 8000f7c:	f000 ff55 	bl	8001e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f80:	2007      	movs	r0, #7
 8000f82:	f000 ff6e 	bl	8001e62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2009      	movs	r0, #9
 8000f8c:	f000 ff4d 	bl	8001e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);        // ALSO ADD THE FUNCTION void EXTI3_IRQHandler(void){} IN stm32f1xx_it.c FILE LIKE OTHER INTERRUPT PIN
 8000f90:	2009      	movs	r0, #9
 8000f92:	f000 ff66 	bl	8001e62 <HAL_NVIC_EnableIRQ>

}
 8000f96:	bf00      	nop
 8000f98:	3720      	adds	r7, #32
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010800 	.word	0x40010800
 8000fa8:	10110000 	.word	0x10110000
 8000fac:	40010c00 	.word	0x40010c00

08000fb0 <ctempfnc>:

//---------------INTERRUPT FUNCTION STARTS HERE--------------//


//this function will count weather the enterbutton has been pressed for TWICE, if so, then , cleart=2
void ctempfnc(void){   //for clearing submenu page once
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
	if (enterbutton ==0){
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <ctempfnc+0x30>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d104      	bne.n	8000fc6 <ctempfnc+0x16>
		cleart = cleart+1;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <ctempfnc+0x34>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <ctempfnc+0x34>)
 8000fc4:	6013      	str	r3, [r2, #0]
	}
	if (enterbutton==1){
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <ctempfnc+0x30>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d104      	bne.n	8000fd8 <ctempfnc+0x28>
		cleart = cleart+1;
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <ctempfnc+0x34>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	4a03      	ldr	r2, [pc, #12]	; (8000fe4 <ctempfnc+0x34>)
 8000fd6:	6013      	str	r3, [r2, #0]
	}
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	20000098 	.word	0x20000098
 8000fe4:	20000010 	.word	0x20000010

08000fe8 <ctempmmneufnc>:

void ctempmmneufnc(void){   //for clearing main menu page once
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
	if (enterbutton!=0){
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <ctempmmneufnc+0x30>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d004      	beq.n	8000ffe <ctempmmneufnc+0x16>
		cleartmmenu=cleartmmenu+1;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <ctempmmneufnc+0x34>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <ctempmmneufnc+0x34>)
 8000ffc:	6013      	str	r3, [r2, #0]
	}
	if (enterbutton==0){
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <ctempmmneufnc+0x30>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d104      	bne.n	8001010 <ctempmmneufnc+0x28>
		cleartmmenu=cleartmmenu+1;
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <ctempmmneufnc+0x34>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <ctempmmneufnc+0x34>)
 800100e:	6013      	str	r3, [r2, #0]
	}
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	20000098 	.word	0x20000098
 800101c:	20000008 	.word	0x20000008

08001020 <ctempssmenufnc>:


void ctempssmenufnc(void){    // for clearing sub sub menu (or third page
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	if (enterbutton!=2){
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <ctempssmenufnc+0x30>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d004      	beq.n	8001036 <ctempssmenufnc+0x16>
		cleartssmenu=cleartssmenu+1;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <ctempssmenufnc+0x34>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	4a08      	ldr	r2, [pc, #32]	; (8001054 <ctempssmenufnc+0x34>)
 8001034:	6013      	str	r3, [r2, #0]
	}
	if(enterbutton==2){
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <ctempssmenufnc+0x30>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d104      	bne.n	8001048 <ctempssmenufnc+0x28>
		cleartssmenu=cleartssmenu+1;
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <ctempssmenufnc+0x34>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a03      	ldr	r2, [pc, #12]	; (8001054 <ctempssmenufnc+0x34>)
 8001046:	6013      	str	r3, [r2, #0]
	}
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	20000098 	.word	0x20000098
 8001054:	2000000c 	.word	0x2000000c

08001058 <HAL_GPIO_EXTI_Callback>:


int temp1=0,temp2=0,temp3=0,temp4=0;  // used in in B3 interrupt function , those are needed to clear screen ONCE for OFF STATE OF LOAD
//INTERRUPT FUNCTION
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
//interrupt for B1 = for cursor button
  if (GPIO_Pin == GPIO_PIN_1)
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d128      	bne.n	80010ba <HAL_GPIO_EXTI_Callback+0x62>
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8001068:	2104      	movs	r1, #4
 800106a:	4882      	ldr	r0, [pc, #520]	; (8001274 <HAL_GPIO_EXTI_Callback+0x21c>)
 800106c:	f001 f8c7 	bl	80021fe <HAL_GPIO_TogglePin>
    if (enterbutton==0){
 8001070:	4b81      	ldr	r3, [pc, #516]	; (8001278 <HAL_GPIO_EXTI_Callback+0x220>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10c      	bne.n	8001092 <HAL_GPIO_EXTI_Callback+0x3a>
        cursorbutton=cursorbutton+1;   //for the main menu page
 8001078:	4b80      	ldr	r3, [pc, #512]	; (800127c <HAL_GPIO_EXTI_Callback+0x224>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	4a7f      	ldr	r2, [pc, #508]	; (800127c <HAL_GPIO_EXTI_Callback+0x224>)
 8001080:	6013      	str	r3, [r2, #0]
        if(cursorbutton>=5){
 8001082:	4b7e      	ldr	r3, [pc, #504]	; (800127c <HAL_GPIO_EXTI_Callback+0x224>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b04      	cmp	r3, #4
 8001088:	dd17      	ble.n	80010ba <HAL_GPIO_EXTI_Callback+0x62>
        	cursorbutton=1;  // so , cursor button will started from 1 again
 800108a:	4b7c      	ldr	r3, [pc, #496]	; (800127c <HAL_GPIO_EXTI_Callback+0x224>)
 800108c:	2201      	movs	r2, #1
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	e013      	b.n	80010ba <HAL_GPIO_EXTI_Callback+0x62>
        }
    }
    else if((enterbutton==1) && (cursorbutton==2)){
 8001092:	4b79      	ldr	r3, [pc, #484]	; (8001278 <HAL_GPIO_EXTI_Callback+0x220>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d10f      	bne.n	80010ba <HAL_GPIO_EXTI_Callback+0x62>
 800109a:	4b78      	ldr	r3, [pc, #480]	; (800127c <HAL_GPIO_EXTI_Callback+0x224>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d10b      	bne.n	80010ba <HAL_GPIO_EXTI_Callback+0x62>
    	smcursobutton=smcursobutton+1;  //for the submenu page
 80010a2:	4b77      	ldr	r3, [pc, #476]	; (8001280 <HAL_GPIO_EXTI_Callback+0x228>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	3301      	adds	r3, #1
 80010a8:	4a75      	ldr	r2, [pc, #468]	; (8001280 <HAL_GPIO_EXTI_Callback+0x228>)
 80010aa:	6013      	str	r3, [r2, #0]
    	if (smcursobutton>=5){
 80010ac:	4b74      	ldr	r3, [pc, #464]	; (8001280 <HAL_GPIO_EXTI_Callback+0x228>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	dd02      	ble.n	80010ba <HAL_GPIO_EXTI_Callback+0x62>
    		smcursobutton=1;   // so, smcursorbutton will start from 1 againg
 80010b4:	4b72      	ldr	r3, [pc, #456]	; (8001280 <HAL_GPIO_EXTI_Callback+0x228>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	601a      	str	r2, [r3, #0]
    	}
    }
  }

 //interrupt for B0 = for enter boutton
  if(GPIO_Pin == GPIO_PIN_0){
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d13c      	bne.n	800113a <HAL_GPIO_EXTI_Callback+0xe2>
	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_1);
 80010c0:	2102      	movs	r1, #2
 80010c2:	486c      	ldr	r0, [pc, #432]	; (8001274 <HAL_GPIO_EXTI_Callback+0x21c>)
 80010c4:	f001 f89b 	bl	80021fe <HAL_GPIO_TogglePin>

	  enterbutton=enterbutton+1;
 80010c8:	4b6b      	ldr	r3, [pc, #428]	; (8001278 <HAL_GPIO_EXTI_Callback+0x220>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	3301      	adds	r3, #1
 80010ce:	4a6a      	ldr	r2, [pc, #424]	; (8001278 <HAL_GPIO_EXTI_Callback+0x220>)
 80010d0:	6013      	str	r3, [r2, #0]

	  if (cursorbutton==2){   //menu 2 or load is selected, so, an additional page or third page is required
 80010d2:	4b6a      	ldr	r3, [pc, #424]	; (800127c <HAL_GPIO_EXTI_Callback+0x224>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d107      	bne.n	80010ea <HAL_GPIO_EXTI_Callback+0x92>
		  if(enterbutton>=3){    //thats why in this condition, enterbutton can be go up to 2 (total, 0,1 and2)
 80010da:	4b67      	ldr	r3, [pc, #412]	; (8001278 <HAL_GPIO_EXTI_Callback+0x220>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	dd0a      	ble.n	80010f8 <HAL_GPIO_EXTI_Callback+0xa0>
			  enterbutton=0;
 80010e2:	4b65      	ldr	r3, [pc, #404]	; (8001278 <HAL_GPIO_EXTI_Callback+0x220>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	e006      	b.n	80010f8 <HAL_GPIO_EXTI_Callback+0xa0>
		  }
	  }

	  else{              // else or except menu 2 or load status fnc  , additional page is not required
		  if(enterbutton>=2){       // so, it will take up to 1
 80010ea:	4b63      	ldr	r3, [pc, #396]	; (8001278 <HAL_GPIO_EXTI_Callback+0x220>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	dd02      	ble.n	80010f8 <HAL_GPIO_EXTI_Callback+0xa0>
			  enterbutton=0;
 80010f2:	4b61      	ldr	r3, [pc, #388]	; (8001278 <HAL_GPIO_EXTI_Callback+0x220>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
	                              // and 2 will take to sub-sub page ;see the while loop for details




	  ctempfnc();             //for clearing submenu // function for counting TWO enter button press
 80010f8:	f7ff ff5a 	bl	8000fb0 <ctempfnc>
	  if (cleart==2){           // clear==2 means the enterbutton has been pressed twice and enterbutton==1  (i.1to0(main menu); ii.0to1(submenu)
 80010fc:	4b61      	ldr	r3, [pc, #388]	; (8001284 <HAL_GPIO_EXTI_Callback+0x22c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d105      	bne.n	8001110 <HAL_GPIO_EXTI_Callback+0xb8>
		  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
		  cleart=0;              // initially, in declaration, cleart =1; which will works for one entebutton pressing as it dont back from main menu
 8001104:	4b5f      	ldr	r3, [pc, #380]	; (8001284 <HAL_GPIO_EXTI_Callback+0x22c>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
		  cleartemp=1;           //so, the page is at sub menu and the it should clear the page; thats why cleartemp=1;
 800110a:	4b5f      	ldr	r3, [pc, #380]	; (8001288 <HAL_GPIO_EXTI_Callback+0x230>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]
	  }


	  ctempmmneufnc();     // for clearing main menu
 8001110:	f7ff ff6a 	bl	8000fe8 <ctempmmneufnc>
	  if (cleartmmenu==2){
 8001114:	4b5d      	ldr	r3, [pc, #372]	; (800128c <HAL_GPIO_EXTI_Callback+0x234>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d105      	bne.n	8001128 <HAL_GPIO_EXTI_Callback+0xd0>
		  cleartmmenu=0;
 800111c:	4b5b      	ldr	r3, [pc, #364]	; (800128c <HAL_GPIO_EXTI_Callback+0x234>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
		  cleartempmmenu=1;
 8001122:	4b5b      	ldr	r3, [pc, #364]	; (8001290 <HAL_GPIO_EXTI_Callback+0x238>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]
	  }


	  ctempssmenufnc();       // for clearing sub-sub menu
 8001128:	f7ff ff7a 	bl	8001020 <ctempssmenufnc>
	  if(cleartssmenu>=2){
 800112c:	4b59      	ldr	r3, [pc, #356]	; (8001294 <HAL_GPIO_EXTI_Callback+0x23c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	dd02      	ble.n	800113a <HAL_GPIO_EXTI_Callback+0xe2>
		  cleartempssmenu=1;
 8001134:	4b58      	ldr	r3, [pc, #352]	; (8001298 <HAL_GPIO_EXTI_Callback+0x240>)
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]
	  }
  }

  //INTERRUPT PIN 3 PB3 FOR COUNTING THE LOAD ON-TIME
  if(GPIO_Pin == GPIO_PIN_3){
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	2b08      	cmp	r3, #8
 800113e:	f040 8179 	bne.w	8001434 <HAL_GPIO_EXTI_Callback+0x3dc>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001142:	2110      	movs	r1, #16
 8001144:	484b      	ldr	r0, [pc, #300]	; (8001274 <HAL_GPIO_EXTI_Callback+0x21c>)
 8001146:	f001 f85a 	bl	80021fe <HAL_GPIO_TogglePin>

		sec0s=sec0s+1;    // at 06-08-22 for updating with system ontime
 800114a:	4b54      	ldr	r3, [pc, #336]	; (800129c <HAL_GPIO_EXTI_Callback+0x244>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	4a52      	ldr	r2, [pc, #328]	; (800129c <HAL_GPIO_EXTI_Callback+0x244>)
 8001152:	6013      	str	r3, [r2, #0]
		                        //incrementing second

		if (sec0s>=60){  // to make a minute
 8001154:	4b51      	ldr	r3, [pc, #324]	; (800129c <HAL_GPIO_EXTI_Callback+0x244>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b3b      	cmp	r3, #59	; 0x3b
 800115a:	dd15      	ble.n	8001188 <HAL_GPIO_EXTI_Callback+0x130>
						SSD1306_Clear();
 800115c:	f000 fbb3 	bl	80018c6 <SSD1306_Clear>
						sec0m=sec0m+1;
 8001160:	4b4f      	ldr	r3, [pc, #316]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x248>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	3301      	adds	r3, #1
 8001166:	4a4e      	ldr	r2, [pc, #312]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x248>)
 8001168:	6013      	str	r3, [r2, #0]
						if(sec0m>=60){
 800116a:	4b4d      	ldr	r3, [pc, #308]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x248>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b3b      	cmp	r3, #59	; 0x3b
 8001170:	dd07      	ble.n	8001182 <HAL_GPIO_EXTI_Callback+0x12a>
							sec0h=sec0h+1;
 8001172:	4b4c      	ldr	r3, [pc, #304]	; (80012a4 <HAL_GPIO_EXTI_Callback+0x24c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	3301      	adds	r3, #1
 8001178:	4a4a      	ldr	r2, [pc, #296]	; (80012a4 <HAL_GPIO_EXTI_Callback+0x24c>)
 800117a:	6013      	str	r3, [r2, #0]
							sec0m=0;
 800117c:	4b48      	ldr	r3, [pc, #288]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x248>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
						}
						sec0s=0;
 8001182:	4b46      	ldr	r3, [pc, #280]	; (800129c <HAL_GPIO_EXTI_Callback+0x244>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
					}


	  //for load-1 (connected to input pin A8)
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)==1){
 8001188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118c:	4839      	ldr	r0, [pc, #228]	; (8001274 <HAL_GPIO_EXTI_Callback+0x21c>)
 800118e:	f001 f807 	bl	80021a0 <HAL_GPIO_ReadPin>
 8001192:	4603      	mov	r3, r0
 8001194:	2b01      	cmp	r3, #1
 8001196:	d122      	bne.n	80011de <HAL_GPIO_EXTI_Callback+0x186>
			sec1s=sec1s+1;    //incrementing second
 8001198:	4b43      	ldr	r3, [pc, #268]	; (80012a8 <HAL_GPIO_EXTI_Callback+0x250>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	4a42      	ldr	r2, [pc, #264]	; (80012a8 <HAL_GPIO_EXTI_Callback+0x250>)
 80011a0:	6013      	str	r3, [r2, #0]

			if (sec1s>=60){  // to make a minute
 80011a2:	4b41      	ldr	r3, [pc, #260]	; (80012a8 <HAL_GPIO_EXTI_Callback+0x250>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b3b      	cmp	r3, #59	; 0x3b
 80011a8:	dd15      	ble.n	80011d6 <HAL_GPIO_EXTI_Callback+0x17e>
							SSD1306_Clear();
 80011aa:	f000 fb8c 	bl	80018c6 <SSD1306_Clear>
							sec1m=sec1m+1;
 80011ae:	4b3f      	ldr	r3, [pc, #252]	; (80012ac <HAL_GPIO_EXTI_Callback+0x254>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	3301      	adds	r3, #1
 80011b4:	4a3d      	ldr	r2, [pc, #244]	; (80012ac <HAL_GPIO_EXTI_Callback+0x254>)
 80011b6:	6013      	str	r3, [r2, #0]
							if(sec1m>=60){
 80011b8:	4b3c      	ldr	r3, [pc, #240]	; (80012ac <HAL_GPIO_EXTI_Callback+0x254>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b3b      	cmp	r3, #59	; 0x3b
 80011be:	dd07      	ble.n	80011d0 <HAL_GPIO_EXTI_Callback+0x178>
								sec1h=sec1h+1;
 80011c0:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x258>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a3a      	ldr	r2, [pc, #232]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x258>)
 80011c8:	6013      	str	r3, [r2, #0]
								sec1m=0;
 80011ca:	4b38      	ldr	r3, [pc, #224]	; (80012ac <HAL_GPIO_EXTI_Callback+0x254>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
							}
							sec1s=0;
 80011d0:	4b35      	ldr	r3, [pc, #212]	; (80012a8 <HAL_GPIO_EXTI_Callback+0x250>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
						}
			temp1=0;
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x25c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e01f      	b.n	800121e <HAL_GPIO_EXTI_Callback+0x1c6>
		}
		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)==0){
 80011de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e2:	4824      	ldr	r0, [pc, #144]	; (8001274 <HAL_GPIO_EXTI_Callback+0x21c>)
 80011e4:	f000 ffdc 	bl	80021a0 <HAL_GPIO_ReadPin>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d117      	bne.n	800121e <HAL_GPIO_EXTI_Callback+0x1c6>
			sec1s=0;
 80011ee:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <HAL_GPIO_EXTI_Callback+0x250>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
			sec1m=0;
 80011f4:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <HAL_GPIO_EXTI_Callback+0x254>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
			sec1h=0;
 80011fa:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x258>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
			if ((temp1==0)&&(enterbutton==2)){
 8001200:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10a      	bne.n	800121e <HAL_GPIO_EXTI_Callback+0x1c6>
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <HAL_GPIO_EXTI_Callback+0x220>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d106      	bne.n	800121e <HAL_GPIO_EXTI_Callback+0x1c6>
				SSD1306_Clear();
 8001210:	f000 fb59 	bl	80018c6 <SSD1306_Clear>
				temp1=temp1+1;
 8001214:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	4a26      	ldr	r2, [pc, #152]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x25c>)
 800121c:	6013      	str	r3, [r2, #0]
			}
		}

		//for load-2 (connected to input pin A9)
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==1){
 800121e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001222:	4814      	ldr	r0, [pc, #80]	; (8001274 <HAL_GPIO_EXTI_Callback+0x21c>)
 8001224:	f000 ffbc 	bl	80021a0 <HAL_GPIO_ReadPin>
 8001228:	4603      	mov	r3, r0
 800122a:	2b01      	cmp	r3, #1
 800122c:	d14c      	bne.n	80012c8 <HAL_GPIO_EXTI_Callback+0x270>
			sec2s=sec2s+1;
 800122e:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x260>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	4a20      	ldr	r2, [pc, #128]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x260>)
 8001236:	6013      	str	r3, [r2, #0]
			if (sec2s>=60){
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x260>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b3b      	cmp	r3, #59	; 0x3b
 800123e:	dd15      	ble.n	800126c <HAL_GPIO_EXTI_Callback+0x214>
							SSD1306_Clear();
 8001240:	f000 fb41 	bl	80018c6 <SSD1306_Clear>
							sec2m=sec2m+1;
 8001244:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_GPIO_EXTI_Callback+0x264>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	4a1c      	ldr	r2, [pc, #112]	; (80012bc <HAL_GPIO_EXTI_Callback+0x264>)
 800124c:	6013      	str	r3, [r2, #0]
							if(sec2m>=60){
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <HAL_GPIO_EXTI_Callback+0x264>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b3b      	cmp	r3, #59	; 0x3b
 8001254:	dd07      	ble.n	8001266 <HAL_GPIO_EXTI_Callback+0x20e>
								sec2h=sec2h+1;
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x268>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x268>)
 800125e:	6013      	str	r3, [r2, #0]
								sec2m=0;
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_GPIO_EXTI_Callback+0x264>)
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
							}
							sec2s=0;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x260>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
						}
			temp2=0;
 800126c:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x26c>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	e049      	b.n	8001308 <HAL_GPIO_EXTI_Callback+0x2b0>
 8001274:	40010800 	.word	0x40010800
 8001278:	20000098 	.word	0x20000098
 800127c:	20000090 	.word	0x20000090
 8001280:	20000094 	.word	0x20000094
 8001284:	20000010 	.word	0x20000010
 8001288:	20000158 	.word	0x20000158
 800128c:	20000008 	.word	0x20000008
 8001290:	2000009c 	.word	0x2000009c
 8001294:	2000000c 	.word	0x2000000c
 8001298:	200000a0 	.word	0x200000a0
 800129c:	20000134 	.word	0x20000134
 80012a0:	20000138 	.word	0x20000138
 80012a4:	2000013c 	.word	0x2000013c
 80012a8:	200000a4 	.word	0x200000a4
 80012ac:	200000a8 	.word	0x200000a8
 80012b0:	200000ac 	.word	0x200000ac
 80012b4:	2000015c 	.word	0x2000015c
 80012b8:	200000c8 	.word	0x200000c8
 80012bc:	200000cc 	.word	0x200000cc
 80012c0:	200000d0 	.word	0x200000d0
 80012c4:	20000160 	.word	0x20000160
		}
		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==0){
 80012c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012cc:	485b      	ldr	r0, [pc, #364]	; (800143c <HAL_GPIO_EXTI_Callback+0x3e4>)
 80012ce:	f000 ff67 	bl	80021a0 <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d117      	bne.n	8001308 <HAL_GPIO_EXTI_Callback+0x2b0>
			sec2s=0;
 80012d8:	4b59      	ldr	r3, [pc, #356]	; (8001440 <HAL_GPIO_EXTI_Callback+0x3e8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
			sec2m=0;
 80012de:	4b59      	ldr	r3, [pc, #356]	; (8001444 <HAL_GPIO_EXTI_Callback+0x3ec>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
			sec2h=0;
 80012e4:	4b58      	ldr	r3, [pc, #352]	; (8001448 <HAL_GPIO_EXTI_Callback+0x3f0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
			if ((temp2==0)&&(enterbutton==2)){
 80012ea:	4b58      	ldr	r3, [pc, #352]	; (800144c <HAL_GPIO_EXTI_Callback+0x3f4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10a      	bne.n	8001308 <HAL_GPIO_EXTI_Callback+0x2b0>
 80012f2:	4b57      	ldr	r3, [pc, #348]	; (8001450 <HAL_GPIO_EXTI_Callback+0x3f8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d106      	bne.n	8001308 <HAL_GPIO_EXTI_Callback+0x2b0>
				SSD1306_Clear();
 80012fa:	f000 fae4 	bl	80018c6 <SSD1306_Clear>
				temp2=temp2+1;
 80012fe:	4b53      	ldr	r3, [pc, #332]	; (800144c <HAL_GPIO_EXTI_Callback+0x3f4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	4a51      	ldr	r2, [pc, #324]	; (800144c <HAL_GPIO_EXTI_Callback+0x3f4>)
 8001306:	6013      	str	r3, [r2, #0]
			}
		}

		//for load-3 (connected to input pin A10)
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)==1){
 8001308:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800130c:	484b      	ldr	r0, [pc, #300]	; (800143c <HAL_GPIO_EXTI_Callback+0x3e4>)
 800130e:	f000 ff47 	bl	80021a0 <HAL_GPIO_ReadPin>
 8001312:	4603      	mov	r3, r0
 8001314:	2b01      	cmp	r3, #1
 8001316:	d122      	bne.n	800135e <HAL_GPIO_EXTI_Callback+0x306>
			sec3s=sec3s+1;
 8001318:	4b4e      	ldr	r3, [pc, #312]	; (8001454 <HAL_GPIO_EXTI_Callback+0x3fc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	4a4d      	ldr	r2, [pc, #308]	; (8001454 <HAL_GPIO_EXTI_Callback+0x3fc>)
 8001320:	6013      	str	r3, [r2, #0]
			if (sec3s>=60){
 8001322:	4b4c      	ldr	r3, [pc, #304]	; (8001454 <HAL_GPIO_EXTI_Callback+0x3fc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b3b      	cmp	r3, #59	; 0x3b
 8001328:	dd15      	ble.n	8001356 <HAL_GPIO_EXTI_Callback+0x2fe>
							SSD1306_Clear();
 800132a:	f000 facc 	bl	80018c6 <SSD1306_Clear>
							sec3m=sec3m+1;
 800132e:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <HAL_GPIO_EXTI_Callback+0x400>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	4a48      	ldr	r2, [pc, #288]	; (8001458 <HAL_GPIO_EXTI_Callback+0x400>)
 8001336:	6013      	str	r3, [r2, #0]
							if(sec3m>=60){
 8001338:	4b47      	ldr	r3, [pc, #284]	; (8001458 <HAL_GPIO_EXTI_Callback+0x400>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b3b      	cmp	r3, #59	; 0x3b
 800133e:	dd07      	ble.n	8001350 <HAL_GPIO_EXTI_Callback+0x2f8>
								sec3h=sec3h+1;
 8001340:	4b46      	ldr	r3, [pc, #280]	; (800145c <HAL_GPIO_EXTI_Callback+0x404>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	4a45      	ldr	r2, [pc, #276]	; (800145c <HAL_GPIO_EXTI_Callback+0x404>)
 8001348:	6013      	str	r3, [r2, #0]
								sec3m=0;
 800134a:	4b43      	ldr	r3, [pc, #268]	; (8001458 <HAL_GPIO_EXTI_Callback+0x400>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
							}
							sec3s=0;
 8001350:	4b40      	ldr	r3, [pc, #256]	; (8001454 <HAL_GPIO_EXTI_Callback+0x3fc>)
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
						}
			temp3=0;
 8001356:	4b42      	ldr	r3, [pc, #264]	; (8001460 <HAL_GPIO_EXTI_Callback+0x408>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e01f      	b.n	800139e <HAL_GPIO_EXTI_Callback+0x346>
		}
		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)==0){
 800135e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001362:	4836      	ldr	r0, [pc, #216]	; (800143c <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001364:	f000 ff1c 	bl	80021a0 <HAL_GPIO_ReadPin>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d117      	bne.n	800139e <HAL_GPIO_EXTI_Callback+0x346>
			sec3s=0;
 800136e:	4b39      	ldr	r3, [pc, #228]	; (8001454 <HAL_GPIO_EXTI_Callback+0x3fc>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
			sec3m=0;
 8001374:	4b38      	ldr	r3, [pc, #224]	; (8001458 <HAL_GPIO_EXTI_Callback+0x400>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
			sec3h=0;
 800137a:	4b38      	ldr	r3, [pc, #224]	; (800145c <HAL_GPIO_EXTI_Callback+0x404>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
			if ((temp3==0)&&(enterbutton==2)){
 8001380:	4b37      	ldr	r3, [pc, #220]	; (8001460 <HAL_GPIO_EXTI_Callback+0x408>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10a      	bne.n	800139e <HAL_GPIO_EXTI_Callback+0x346>
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <HAL_GPIO_EXTI_Callback+0x3f8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d106      	bne.n	800139e <HAL_GPIO_EXTI_Callback+0x346>
				SSD1306_Clear();
 8001390:	f000 fa99 	bl	80018c6 <SSD1306_Clear>
				temp3=temp3+1;
 8001394:	4b32      	ldr	r3, [pc, #200]	; (8001460 <HAL_GPIO_EXTI_Callback+0x408>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	4a31      	ldr	r2, [pc, #196]	; (8001460 <HAL_GPIO_EXTI_Callback+0x408>)
 800139c:	6013      	str	r3, [r2, #0]
			}
		}

		//for load-4 (connected to input pin A11)
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)==1){
 800139e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a2:	4826      	ldr	r0, [pc, #152]	; (800143c <HAL_GPIO_EXTI_Callback+0x3e4>)
 80013a4:	f000 fefc 	bl	80021a0 <HAL_GPIO_ReadPin>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d122      	bne.n	80013f4 <HAL_GPIO_EXTI_Callback+0x39c>
			sec4s=sec4s+1;
 80013ae:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <HAL_GPIO_EXTI_Callback+0x40c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	4a2b      	ldr	r2, [pc, #172]	; (8001464 <HAL_GPIO_EXTI_Callback+0x40c>)
 80013b6:	6013      	str	r3, [r2, #0]
			if (sec4s>=60){
 80013b8:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <HAL_GPIO_EXTI_Callback+0x40c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b3b      	cmp	r3, #59	; 0x3b
 80013be:	dd15      	ble.n	80013ec <HAL_GPIO_EXTI_Callback+0x394>
							SSD1306_Clear();
 80013c0:	f000 fa81 	bl	80018c6 <SSD1306_Clear>
							sec4m=sec4m+1;
 80013c4:	4b28      	ldr	r3, [pc, #160]	; (8001468 <HAL_GPIO_EXTI_Callback+0x410>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	4a27      	ldr	r2, [pc, #156]	; (8001468 <HAL_GPIO_EXTI_Callback+0x410>)
 80013cc:	6013      	str	r3, [r2, #0]
							if(sec4m>=60){
 80013ce:	4b26      	ldr	r3, [pc, #152]	; (8001468 <HAL_GPIO_EXTI_Callback+0x410>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b3b      	cmp	r3, #59	; 0x3b
 80013d4:	dd07      	ble.n	80013e6 <HAL_GPIO_EXTI_Callback+0x38e>
								sec4h=sec4h+1;
 80013d6:	4b25      	ldr	r3, [pc, #148]	; (800146c <HAL_GPIO_EXTI_Callback+0x414>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	4a23      	ldr	r2, [pc, #140]	; (800146c <HAL_GPIO_EXTI_Callback+0x414>)
 80013de:	6013      	str	r3, [r2, #0]
								sec4m=0;
 80013e0:	4b21      	ldr	r3, [pc, #132]	; (8001468 <HAL_GPIO_EXTI_Callback+0x410>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
							}
							sec4s=0;
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <HAL_GPIO_EXTI_Callback+0x40c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
						}
			temp4=0;
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <HAL_GPIO_EXTI_Callback+0x418>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
				SSD1306_Clear();
				temp4=temp4+1;
			}
		}
  }
}
 80013f2:	e01f      	b.n	8001434 <HAL_GPIO_EXTI_Callback+0x3dc>
		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)==0){
 80013f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f8:	4810      	ldr	r0, [pc, #64]	; (800143c <HAL_GPIO_EXTI_Callback+0x3e4>)
 80013fa:	f000 fed1 	bl	80021a0 <HAL_GPIO_ReadPin>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d117      	bne.n	8001434 <HAL_GPIO_EXTI_Callback+0x3dc>
			sec4s=0;
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_GPIO_EXTI_Callback+0x40c>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
			sec4m=0;
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_GPIO_EXTI_Callback+0x410>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
			sec4h=0;
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <HAL_GPIO_EXTI_Callback+0x414>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
			if ((temp4==0)&&(enterbutton==2)){
 8001416:	4b16      	ldr	r3, [pc, #88]	; (8001470 <HAL_GPIO_EXTI_Callback+0x418>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10a      	bne.n	8001434 <HAL_GPIO_EXTI_Callback+0x3dc>
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_GPIO_EXTI_Callback+0x3f8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d106      	bne.n	8001434 <HAL_GPIO_EXTI_Callback+0x3dc>
				SSD1306_Clear();
 8001426:	f000 fa4e 	bl	80018c6 <SSD1306_Clear>
				temp4=temp4+1;
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_GPIO_EXTI_Callback+0x418>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <HAL_GPIO_EXTI_Callback+0x418>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40010800 	.word	0x40010800
 8001440:	200000c8 	.word	0x200000c8
 8001444:	200000cc 	.word	0x200000cc
 8001448:	200000d0 	.word	0x200000d0
 800144c:	20000160 	.word	0x20000160
 8001450:	20000098 	.word	0x20000098
 8001454:	200000ec 	.word	0x200000ec
 8001458:	200000f0 	.word	0x200000f0
 800145c:	200000f4 	.word	0x200000f4
 8001460:	20000164 	.word	0x20000164
 8001464:	20000110 	.word	0x20000110
 8001468:	20000114 	.word	0x20000114
 800146c:	20000118 	.word	0x20000118
 8001470:	20000168 	.word	0x20000168

08001474 <Error_Handler>:
//---------------INTERRUPT FUNCTION ENDS HERE----------------//

void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
  __disable_irq();
  while (1)
 800147c:	e7fe      	b.n	800147c <Error_Handler+0x8>
	...

08001480 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001486:	f000 fa27 	bl	80018d8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800148a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800148e:	2201      	movs	r2, #1
 8001490:	2178      	movs	r1, #120	; 0x78
 8001492:	485b      	ldr	r0, [pc, #364]	; (8001600 <SSD1306_Init+0x180>)
 8001494:	f001 f926 	bl	80026e4 <HAL_I2C_IsDeviceReady>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	e0a9      	b.n	80015f6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80014a2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80014a6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014a8:	e002      	b.n	80014b0 <SSD1306_Init+0x30>
		p--;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f9      	bne.n	80014aa <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80014b6:	22ae      	movs	r2, #174	; 0xae
 80014b8:	2100      	movs	r1, #0
 80014ba:	2078      	movs	r0, #120	; 0x78
 80014bc:	f000 fa86 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80014c0:	2220      	movs	r2, #32
 80014c2:	2100      	movs	r1, #0
 80014c4:	2078      	movs	r0, #120	; 0x78
 80014c6:	f000 fa81 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80014ca:	2210      	movs	r2, #16
 80014cc:	2100      	movs	r1, #0
 80014ce:	2078      	movs	r0, #120	; 0x78
 80014d0:	f000 fa7c 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014d4:	22b0      	movs	r2, #176	; 0xb0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2078      	movs	r0, #120	; 0x78
 80014da:	f000 fa77 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80014de:	22c8      	movs	r2, #200	; 0xc8
 80014e0:	2100      	movs	r1, #0
 80014e2:	2078      	movs	r0, #120	; 0x78
 80014e4:	f000 fa72 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80014e8:	2200      	movs	r2, #0
 80014ea:	2100      	movs	r1, #0
 80014ec:	2078      	movs	r0, #120	; 0x78
 80014ee:	f000 fa6d 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80014f2:	2210      	movs	r2, #16
 80014f4:	2100      	movs	r1, #0
 80014f6:	2078      	movs	r0, #120	; 0x78
 80014f8:	f000 fa68 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80014fc:	2240      	movs	r2, #64	; 0x40
 80014fe:	2100      	movs	r1, #0
 8001500:	2078      	movs	r0, #120	; 0x78
 8001502:	f000 fa63 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001506:	2281      	movs	r2, #129	; 0x81
 8001508:	2100      	movs	r1, #0
 800150a:	2078      	movs	r0, #120	; 0x78
 800150c:	f000 fa5e 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001510:	22ff      	movs	r2, #255	; 0xff
 8001512:	2100      	movs	r1, #0
 8001514:	2078      	movs	r0, #120	; 0x78
 8001516:	f000 fa59 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800151a:	22a1      	movs	r2, #161	; 0xa1
 800151c:	2100      	movs	r1, #0
 800151e:	2078      	movs	r0, #120	; 0x78
 8001520:	f000 fa54 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001524:	22a6      	movs	r2, #166	; 0xa6
 8001526:	2100      	movs	r1, #0
 8001528:	2078      	movs	r0, #120	; 0x78
 800152a:	f000 fa4f 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800152e:	22a8      	movs	r2, #168	; 0xa8
 8001530:	2100      	movs	r1, #0
 8001532:	2078      	movs	r0, #120	; 0x78
 8001534:	f000 fa4a 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001538:	223f      	movs	r2, #63	; 0x3f
 800153a:	2100      	movs	r1, #0
 800153c:	2078      	movs	r0, #120	; 0x78
 800153e:	f000 fa45 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001542:	22a4      	movs	r2, #164	; 0xa4
 8001544:	2100      	movs	r1, #0
 8001546:	2078      	movs	r0, #120	; 0x78
 8001548:	f000 fa40 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800154c:	22d3      	movs	r2, #211	; 0xd3
 800154e:	2100      	movs	r1, #0
 8001550:	2078      	movs	r0, #120	; 0x78
 8001552:	f000 fa3b 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	2078      	movs	r0, #120	; 0x78
 800155c:	f000 fa36 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001560:	22d5      	movs	r2, #213	; 0xd5
 8001562:	2100      	movs	r1, #0
 8001564:	2078      	movs	r0, #120	; 0x78
 8001566:	f000 fa31 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800156a:	22f0      	movs	r2, #240	; 0xf0
 800156c:	2100      	movs	r1, #0
 800156e:	2078      	movs	r0, #120	; 0x78
 8001570:	f000 fa2c 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001574:	22d9      	movs	r2, #217	; 0xd9
 8001576:	2100      	movs	r1, #0
 8001578:	2078      	movs	r0, #120	; 0x78
 800157a:	f000 fa27 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800157e:	2222      	movs	r2, #34	; 0x22
 8001580:	2100      	movs	r1, #0
 8001582:	2078      	movs	r0, #120	; 0x78
 8001584:	f000 fa22 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001588:	22da      	movs	r2, #218	; 0xda
 800158a:	2100      	movs	r1, #0
 800158c:	2078      	movs	r0, #120	; 0x78
 800158e:	f000 fa1d 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001592:	2212      	movs	r2, #18
 8001594:	2100      	movs	r1, #0
 8001596:	2078      	movs	r0, #120	; 0x78
 8001598:	f000 fa18 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800159c:	22db      	movs	r2, #219	; 0xdb
 800159e:	2100      	movs	r1, #0
 80015a0:	2078      	movs	r0, #120	; 0x78
 80015a2:	f000 fa13 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80015a6:	2220      	movs	r2, #32
 80015a8:	2100      	movs	r1, #0
 80015aa:	2078      	movs	r0, #120	; 0x78
 80015ac:	f000 fa0e 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80015b0:	228d      	movs	r2, #141	; 0x8d
 80015b2:	2100      	movs	r1, #0
 80015b4:	2078      	movs	r0, #120	; 0x78
 80015b6:	f000 fa09 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80015ba:	2214      	movs	r2, #20
 80015bc:	2100      	movs	r1, #0
 80015be:	2078      	movs	r0, #120	; 0x78
 80015c0:	f000 fa04 	bl	80019cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80015c4:	22af      	movs	r2, #175	; 0xaf
 80015c6:	2100      	movs	r1, #0
 80015c8:	2078      	movs	r0, #120	; 0x78
 80015ca:	f000 f9ff 	bl	80019cc <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80015ce:	222e      	movs	r2, #46	; 0x2e
 80015d0:	2100      	movs	r1, #0
 80015d2:	2078      	movs	r0, #120	; 0x78
 80015d4:	f000 f9fa 	bl	80019cc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80015d8:	2000      	movs	r0, #0
 80015da:	f000 f843 	bl	8001664 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80015de:	f000 f813 	bl	8001608 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <SSD1306_Init+0x184>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <SSD1306_Init+0x184>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <SSD1306_Init+0x184>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80015f4:	2301      	movs	r3, #1
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000003c 	.word	0x2000003c
 8001604:	2000056c 	.word	0x2000056c

08001608 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800160e:	2300      	movs	r3, #0
 8001610:	71fb      	strb	r3, [r7, #7]
 8001612:	e01d      	b.n	8001650 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	3b50      	subs	r3, #80	; 0x50
 8001618:	b2db      	uxtb	r3, r3
 800161a:	461a      	mov	r2, r3
 800161c:	2100      	movs	r1, #0
 800161e:	2078      	movs	r0, #120	; 0x78
 8001620:	f000 f9d4 	bl	80019cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001624:	2200      	movs	r2, #0
 8001626:	2100      	movs	r1, #0
 8001628:	2078      	movs	r0, #120	; 0x78
 800162a:	f000 f9cf 	bl	80019cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800162e:	2210      	movs	r2, #16
 8001630:	2100      	movs	r1, #0
 8001632:	2078      	movs	r0, #120	; 0x78
 8001634:	f000 f9ca 	bl	80019cc <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	01db      	lsls	r3, r3, #7
 800163c:	4a08      	ldr	r2, [pc, #32]	; (8001660 <SSD1306_UpdateScreen+0x58>)
 800163e:	441a      	add	r2, r3
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	2140      	movs	r1, #64	; 0x40
 8001644:	2078      	movs	r0, #120	; 0x78
 8001646:	f000 f95b 	bl	8001900 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	3301      	adds	r3, #1
 800164e:	71fb      	strb	r3, [r7, #7]
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	2b07      	cmp	r3, #7
 8001654:	d9de      	bls.n	8001614 <SSD1306_UpdateScreen+0xc>
	}
}
 8001656:	bf00      	nop
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2000016c 	.word	0x2000016c

08001664 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <SSD1306_Fill+0x14>
 8001674:	2300      	movs	r3, #0
 8001676:	e000      	b.n	800167a <SSD1306_Fill+0x16>
 8001678:	23ff      	movs	r3, #255	; 0xff
 800167a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800167e:	4619      	mov	r1, r3
 8001680:	4803      	ldr	r0, [pc, #12]	; (8001690 <SSD1306_Fill+0x2c>)
 8001682:	f001 ffa9 	bl	80035d8 <memset>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000016c 	.word	0x2000016c

08001694 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	80fb      	strh	r3, [r7, #6]
 800169e:	460b      	mov	r3, r1
 80016a0:	80bb      	strh	r3, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	70fb      	strb	r3, [r7, #3]
	if (
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	2b7f      	cmp	r3, #127	; 0x7f
 80016aa:	d848      	bhi.n	800173e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80016ac:	88bb      	ldrh	r3, [r7, #4]
 80016ae:	2b3f      	cmp	r3, #63	; 0x3f
 80016b0:	d845      	bhi.n	800173e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80016b2:	4b25      	ldr	r3, [pc, #148]	; (8001748 <SSD1306_DrawPixel+0xb4>)
 80016b4:	791b      	ldrb	r3, [r3, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d006      	beq.n	80016c8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d11a      	bne.n	8001704 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016ce:	88fa      	ldrh	r2, [r7, #6]
 80016d0:	88bb      	ldrh	r3, [r7, #4]
 80016d2:	08db      	lsrs	r3, r3, #3
 80016d4:	b298      	uxth	r0, r3
 80016d6:	4603      	mov	r3, r0
 80016d8:	01db      	lsls	r3, r3, #7
 80016da:	4413      	add	r3, r2
 80016dc:	4a1b      	ldr	r2, [pc, #108]	; (800174c <SSD1306_DrawPixel+0xb8>)
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	b25a      	sxtb	r2, r3
 80016e2:	88bb      	ldrh	r3, [r7, #4]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	2101      	movs	r1, #1
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b259      	sxtb	r1, r3
 80016f4:	88fa      	ldrh	r2, [r7, #6]
 80016f6:	4603      	mov	r3, r0
 80016f8:	01db      	lsls	r3, r3, #7
 80016fa:	4413      	add	r3, r2
 80016fc:	b2c9      	uxtb	r1, r1
 80016fe:	4a13      	ldr	r2, [pc, #76]	; (800174c <SSD1306_DrawPixel+0xb8>)
 8001700:	54d1      	strb	r1, [r2, r3]
 8001702:	e01d      	b.n	8001740 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001704:	88fa      	ldrh	r2, [r7, #6]
 8001706:	88bb      	ldrh	r3, [r7, #4]
 8001708:	08db      	lsrs	r3, r3, #3
 800170a:	b298      	uxth	r0, r3
 800170c:	4603      	mov	r3, r0
 800170e:	01db      	lsls	r3, r3, #7
 8001710:	4413      	add	r3, r2
 8001712:	4a0e      	ldr	r2, [pc, #56]	; (800174c <SSD1306_DrawPixel+0xb8>)
 8001714:	5cd3      	ldrb	r3, [r2, r3]
 8001716:	b25a      	sxtb	r2, r3
 8001718:	88bb      	ldrh	r3, [r7, #4]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	2101      	movs	r1, #1
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	b25b      	sxtb	r3, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	b25b      	sxtb	r3, r3
 800172a:	4013      	ands	r3, r2
 800172c:	b259      	sxtb	r1, r3
 800172e:	88fa      	ldrh	r2, [r7, #6]
 8001730:	4603      	mov	r3, r0
 8001732:	01db      	lsls	r3, r3, #7
 8001734:	4413      	add	r3, r2
 8001736:	b2c9      	uxtb	r1, r1
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <SSD1306_DrawPixel+0xb8>)
 800173a:	54d1      	strb	r1, [r2, r3]
 800173c:	e000      	b.n	8001740 <SSD1306_DrawPixel+0xac>
		return;
 800173e:	bf00      	nop
	}
}
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	2000056c 	.word	0x2000056c
 800174c:	2000016c 	.word	0x2000016c

08001750 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	460a      	mov	r2, r1
 800175a:	80fb      	strh	r3, [r7, #6]
 800175c:	4613      	mov	r3, r2
 800175e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001760:	4a05      	ldr	r2, [pc, #20]	; (8001778 <SSD1306_GotoXY+0x28>)
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <SSD1306_GotoXY+0x28>)
 8001768:	88bb      	ldrh	r3, [r7, #4]
 800176a:	8053      	strh	r3, [r2, #2]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	2000056c 	.word	0x2000056c

0800177c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
 8001788:	4613      	mov	r3, r2
 800178a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800178c:	4b3a      	ldr	r3, [pc, #232]	; (8001878 <SSD1306_Putc+0xfc>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
	if (
 8001798:	2b7f      	cmp	r3, #127	; 0x7f
 800179a:	dc07      	bgt.n	80017ac <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800179c:	4b36      	ldr	r3, [pc, #216]	; (8001878 <SSD1306_Putc+0xfc>)
 800179e:	885b      	ldrh	r3, [r3, #2]
 80017a0:	461a      	mov	r2, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	785b      	ldrb	r3, [r3, #1]
 80017a6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017a8:	2b3f      	cmp	r3, #63	; 0x3f
 80017aa:	dd01      	ble.n	80017b0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	e05e      	b.n	800186e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	e04b      	b.n	800184e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	3b20      	subs	r3, #32
 80017be:	6839      	ldr	r1, [r7, #0]
 80017c0:	7849      	ldrb	r1, [r1, #1]
 80017c2:	fb01 f303 	mul.w	r3, r1, r3
 80017c6:	4619      	mov	r1, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	440b      	add	r3, r1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80017d4:	2300      	movs	r3, #0
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	e030      	b.n	800183c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d010      	beq.n	800180c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80017ea:	4b23      	ldr	r3, [pc, #140]	; (8001878 <SSD1306_Putc+0xfc>)
 80017ec:	881a      	ldrh	r2, [r3, #0]
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	b298      	uxth	r0, r3
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <SSD1306_Putc+0xfc>)
 80017f8:	885a      	ldrh	r2, [r3, #2]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	4413      	add	r3, r2
 8001800:	b29b      	uxth	r3, r3
 8001802:	79ba      	ldrb	r2, [r7, #6]
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff ff45 	bl	8001694 <SSD1306_DrawPixel>
 800180a:	e014      	b.n	8001836 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <SSD1306_Putc+0xfc>)
 800180e:	881a      	ldrh	r2, [r3, #0]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	b29b      	uxth	r3, r3
 8001814:	4413      	add	r3, r2
 8001816:	b298      	uxth	r0, r3
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <SSD1306_Putc+0xfc>)
 800181a:	885a      	ldrh	r2, [r3, #2]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	b29b      	uxth	r3, r3
 8001820:	4413      	add	r3, r2
 8001822:	b299      	uxth	r1, r3
 8001824:	79bb      	ldrb	r3, [r7, #6]
 8001826:	2b00      	cmp	r3, #0
 8001828:	bf0c      	ite	eq
 800182a:	2301      	moveq	r3, #1
 800182c:	2300      	movne	r3, #0
 800182e:	b2db      	uxtb	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	f7ff ff2f 	bl	8001694 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	3301      	adds	r3, #1
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4293      	cmp	r3, r2
 8001846:	d3c8      	bcc.n	80017da <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	785b      	ldrb	r3, [r3, #1]
 8001852:	461a      	mov	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	4293      	cmp	r3, r2
 8001858:	d3ad      	bcc.n	80017b6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800185a:	4b07      	ldr	r3, [pc, #28]	; (8001878 <SSD1306_Putc+0xfc>)
 800185c:	881a      	ldrh	r2, [r3, #0]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b29b      	uxth	r3, r3
 8001864:	4413      	add	r3, r2
 8001866:	b29a      	uxth	r2, r3
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <SSD1306_Putc+0xfc>)
 800186a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800186c:	79fb      	ldrb	r3, [r7, #7]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	2000056c 	.word	0x2000056c

0800187c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	4613      	mov	r3, r2
 8001888:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800188a:	e012      	b.n	80018b2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	79fa      	ldrb	r2, [r7, #7]
 8001892:	68b9      	ldr	r1, [r7, #8]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff71 	bl	800177c <SSD1306_Putc>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d002      	beq.n	80018ac <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	e008      	b.n	80018be <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	3301      	adds	r3, #1
 80018b0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1e8      	bne.n	800188c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	781b      	ldrb	r3, [r3, #0]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff feca 	bl	8001664 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80018d0:	f7ff fe9a 	bl	8001608 <SSD1306_UpdateScreen>
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <ssd1306_I2C_Init+0x24>)
 80018e0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018e2:	e002      	b.n	80018ea <ssd1306_I2C_Init+0x12>
		p--;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f9      	bne.n	80018e4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	0003d090 	.word	0x0003d090

08001900 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b0c7      	sub	sp, #284	; 0x11c
 8001904:	af02      	add	r7, sp, #8
 8001906:	4604      	mov	r4, r0
 8001908:	4608      	mov	r0, r1
 800190a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800190e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001912:	600a      	str	r2, [r1, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800191a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800191e:	4622      	mov	r2, r4
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001926:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800192a:	4602      	mov	r2, r0
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001932:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001936:	460a      	mov	r2, r1
 8001938:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800193a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800193e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001942:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001946:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800194a:	7812      	ldrb	r2, [r2, #0]
 800194c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800194e:	2300      	movs	r3, #0
 8001950:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001954:	e015      	b.n	8001982 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001956:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800195a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800195e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	441a      	add	r2, r3
 8001966:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800196a:	3301      	adds	r3, #1
 800196c:	7811      	ldrb	r1, [r2, #0]
 800196e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001972:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001976:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001978:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800197c:	3301      	adds	r3, #1
 800197e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001982:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001986:	b29b      	uxth	r3, r3
 8001988:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800198c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001990:	8812      	ldrh	r2, [r2, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d8df      	bhi.n	8001956 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001996:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800199a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b299      	uxth	r1, r3
 80019a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	f107 020c 	add.w	r2, r7, #12
 80019b4:	200a      	movs	r0, #10
 80019b6:	9000      	str	r0, [sp, #0]
 80019b8:	4803      	ldr	r0, [pc, #12]	; (80019c8 <ssd1306_I2C_WriteMulti+0xc8>)
 80019ba:	f000 fd95 	bl	80024e8 <HAL_I2C_Master_Transmit>
}
 80019be:	bf00      	nop
 80019c0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}
 80019c8:	2000003c 	.word	0x2000003c

080019cc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
 80019d6:	460b      	mov	r3, r1
 80019d8:	71bb      	strb	r3, [r7, #6]
 80019da:	4613      	mov	r3, r2
 80019dc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80019de:	79bb      	ldrb	r3, [r7, #6]
 80019e0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80019e2:	797b      	ldrb	r3, [r7, #5]
 80019e4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	b299      	uxth	r1, r3
 80019ea:	f107 020c 	add.w	r2, r7, #12
 80019ee:	230a      	movs	r3, #10
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2302      	movs	r3, #2
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <ssd1306_I2C_Write+0x38>)
 80019f6:	f000 fd77 	bl	80024e8 <HAL_I2C_Master_Transmit>
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000003c 	.word	0x2000003c

08001a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_MspInit+0x5c>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <HAL_MspInit+0x5c>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6193      	str	r3, [r2, #24]
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_MspInit+0x5c>)
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <HAL_MspInit+0x5c>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <HAL_MspInit+0x5c>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a30:	61d3      	str	r3, [r2, #28]
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_MspInit+0x5c>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_MspInit+0x60>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <HAL_MspInit+0x60>)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010000 	.word	0x40010000

08001a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0310 	add.w	r3, r7, #16
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a15      	ldr	r2, [pc, #84]	; (8001adc <HAL_I2C_MspInit+0x70>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d123      	bne.n	8001ad4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <HAL_I2C_MspInit+0x74>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a13      	ldr	r2, [pc, #76]	; (8001ae0 <HAL_I2C_MspInit+0x74>)
 8001a92:	f043 0308 	orr.w	r3, r3, #8
 8001a96:	6193      	str	r3, [r2, #24]
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_I2C_MspInit+0x74>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aa4:	23c0      	movs	r3, #192	; 0xc0
 8001aa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa8:	2312      	movs	r3, #18
 8001aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aac:	2303      	movs	r3, #3
 8001aae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480b      	ldr	r0, [pc, #44]	; (8001ae4 <HAL_I2C_MspInit+0x78>)
 8001ab8:	f000 f9ee 	bl	8001e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_I2C_MspInit+0x74>)
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <HAL_I2C_MspInit+0x74>)
 8001ac2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac6:	61d3      	str	r3, [r2, #28]
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_I2C_MspInit+0x74>)
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ad4:	bf00      	nop
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40005400 	.word	0x40005400
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010c00 	.word	0x40010c00

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <NMI_Handler+0x4>

08001aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <HardFault_Handler+0x4>

08001af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <MemManage_Handler+0x4>

08001afa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <BusFault_Handler+0x4>

08001b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <UsageFault_Handler+0x4>

08001b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2e:	f000 f889 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f000 fb78 	bl	8002230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f000 fb71 	bl	8002230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001b56:	2008      	movs	r0, #8
 8001b58:	f000 fb6a 	bl	8002230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b6c:	480c      	ldr	r0, [pc, #48]	; (8001ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b6e:	490d      	ldr	r1, [pc, #52]	; (8001ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b70:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b74:	e002      	b.n	8001b7c <LoopCopyDataInit>

08001b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7a:	3304      	adds	r3, #4

08001b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b80:	d3f9      	bcc.n	8001b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b84:	4c0a      	ldr	r4, [pc, #40]	; (8001bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b88:	e001      	b.n	8001b8e <LoopFillZerobss>

08001b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b8c:	3204      	adds	r2, #4

08001b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b90:	d3fb      	bcc.n	8001b8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b92:	f7ff ffe5 	bl	8001b60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b96:	f001 fce1 	bl	800355c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b9a:	f7ff f8f5 	bl	8000d88 <main>
  bx lr
 8001b9e:	4770      	bx	lr
  ldr r0, =_sdata
 8001ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001ba8:	08003ff0 	.word	0x08003ff0
  ldr r2, =_sbss
 8001bac:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001bb0:	20000578 	.word	0x20000578

08001bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC1_2_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_Init+0x28>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <HAL_Init+0x28>)
 8001bc2:	f043 0310 	orr.w	r3, r3, #16
 8001bc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f000 f923 	bl	8001e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bce:	200f      	movs	r0, #15
 8001bd0:	f000 f808 	bl	8001be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd4:	f7ff ff18 	bl	8001a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40022000 	.word	0x40022000

08001be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_InitTick+0x54>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_InitTick+0x58>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f93b 	bl	8001e7e <HAL_SYSTICK_Config>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00e      	b.n	8001c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d80a      	bhi.n	8001c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f000 f903 	bl	8001e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c24:	4a06      	ldr	r2, [pc, #24]	; (8001c40 <HAL_InitTick+0x5c>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000014 	.word	0x20000014
 8001c3c:	2000001c 	.word	0x2000001c
 8001c40:	20000018 	.word	0x20000018

08001c44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_IncTick+0x1c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_IncTick+0x20>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <HAL_IncTick+0x20>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	2000001c 	.word	0x2000001c
 8001c64:	20000574 	.word	0x20000574

08001c68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <HAL_GetTick+0x10>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	20000574 	.word	0x20000574

08001c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	60d3      	str	r3, [r2, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <__NVIC_GetPriorityGrouping+0x18>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	f003 0307 	and.w	r3, r3, #7
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	db0b      	blt.n	8001d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	4906      	ldr	r1, [pc, #24]	; (8001d14 <__NVIC_EnableIRQ+0x34>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	2001      	movs	r0, #1
 8001d02:	fa00 f202 	lsl.w	r2, r0, r2
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	e000e100 	.word	0xe000e100

08001d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db0a      	blt.n	8001d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	490c      	ldr	r1, [pc, #48]	; (8001d64 <__NVIC_SetPriority+0x4c>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d40:	e00a      	b.n	8001d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4908      	ldr	r1, [pc, #32]	; (8001d68 <__NVIC_SetPriority+0x50>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	440b      	add	r3, r1
 8001d56:	761a      	strb	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000e100 	.word	0xe000e100
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	; 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f1c3 0307 	rsb	r3, r3, #7
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	bf28      	it	cs
 8001d8a:	2304      	movcs	r3, #4
 8001d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3304      	adds	r3, #4
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d902      	bls.n	8001d9c <NVIC_EncodePriority+0x30>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b03      	subs	r3, #3
 8001d9a:	e000      	b.n	8001d9e <NVIC_EncodePriority+0x32>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43d9      	mvns	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	4313      	orrs	r3, r2
         );
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	; 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de0:	d301      	bcc.n	8001de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00f      	b.n	8001e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <SysTick_Config+0x40>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dee:	210f      	movs	r1, #15
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f7ff ff90 	bl	8001d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <SysTick_Config+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <SysTick_Config+0x40>)
 8001e00:	2207      	movs	r2, #7
 8001e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	e000e010 	.word	0xe000e010

08001e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff2d 	bl	8001c7c <__NVIC_SetPriorityGrouping>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3c:	f7ff ff42 	bl	8001cc4 <__NVIC_GetPriorityGrouping>
 8001e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	6978      	ldr	r0, [r7, #20]
 8001e48:	f7ff ff90 	bl	8001d6c <NVIC_EncodePriority>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff5f 	bl	8001d18 <__NVIC_SetPriority>
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff35 	bl	8001ce0 <__NVIC_EnableIRQ>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ffa2 	bl	8001dd0 <SysTick_Config>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b08b      	sub	sp, #44	; 0x2c
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eaa:	e169      	b.n	8002180 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001eac:	2201      	movs	r2, #1
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	f040 8158 	bne.w	800217a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4a9a      	ldr	r2, [pc, #616]	; (8002138 <HAL_GPIO_Init+0x2a0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d05e      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001ed4:	4a98      	ldr	r2, [pc, #608]	; (8002138 <HAL_GPIO_Init+0x2a0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d875      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001eda:	4a98      	ldr	r2, [pc, #608]	; (800213c <HAL_GPIO_Init+0x2a4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d058      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001ee0:	4a96      	ldr	r2, [pc, #600]	; (800213c <HAL_GPIO_Init+0x2a4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d86f      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001ee6:	4a96      	ldr	r2, [pc, #600]	; (8002140 <HAL_GPIO_Init+0x2a8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d052      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001eec:	4a94      	ldr	r2, [pc, #592]	; (8002140 <HAL_GPIO_Init+0x2a8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d869      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001ef2:	4a94      	ldr	r2, [pc, #592]	; (8002144 <HAL_GPIO_Init+0x2ac>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d04c      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001ef8:	4a92      	ldr	r2, [pc, #584]	; (8002144 <HAL_GPIO_Init+0x2ac>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d863      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001efe:	4a92      	ldr	r2, [pc, #584]	; (8002148 <HAL_GPIO_Init+0x2b0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d046      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001f04:	4a90      	ldr	r2, [pc, #576]	; (8002148 <HAL_GPIO_Init+0x2b0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d85d      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001f0a:	2b12      	cmp	r3, #18
 8001f0c:	d82a      	bhi.n	8001f64 <HAL_GPIO_Init+0xcc>
 8001f0e:	2b12      	cmp	r3, #18
 8001f10:	d859      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001f12:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <HAL_GPIO_Init+0x80>)
 8001f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f18:	08001f93 	.word	0x08001f93
 8001f1c:	08001f6d 	.word	0x08001f6d
 8001f20:	08001f7f 	.word	0x08001f7f
 8001f24:	08001fc1 	.word	0x08001fc1
 8001f28:	08001fc7 	.word	0x08001fc7
 8001f2c:	08001fc7 	.word	0x08001fc7
 8001f30:	08001fc7 	.word	0x08001fc7
 8001f34:	08001fc7 	.word	0x08001fc7
 8001f38:	08001fc7 	.word	0x08001fc7
 8001f3c:	08001fc7 	.word	0x08001fc7
 8001f40:	08001fc7 	.word	0x08001fc7
 8001f44:	08001fc7 	.word	0x08001fc7
 8001f48:	08001fc7 	.word	0x08001fc7
 8001f4c:	08001fc7 	.word	0x08001fc7
 8001f50:	08001fc7 	.word	0x08001fc7
 8001f54:	08001fc7 	.word	0x08001fc7
 8001f58:	08001fc7 	.word	0x08001fc7
 8001f5c:	08001f75 	.word	0x08001f75
 8001f60:	08001f89 	.word	0x08001f89
 8001f64:	4a79      	ldr	r2, [pc, #484]	; (800214c <HAL_GPIO_Init+0x2b4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f6a:	e02c      	b.n	8001fc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	623b      	str	r3, [r7, #32]
          break;
 8001f72:	e029      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	623b      	str	r3, [r7, #32]
          break;
 8001f7c:	e024      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	3308      	adds	r3, #8
 8001f84:	623b      	str	r3, [r7, #32]
          break;
 8001f86:	e01f      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	330c      	adds	r3, #12
 8001f8e:	623b      	str	r3, [r7, #32]
          break;
 8001f90:	e01a      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d102      	bne.n	8001fa0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	623b      	str	r3, [r7, #32]
          break;
 8001f9e:	e013      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d105      	bne.n	8001fb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa8:	2308      	movs	r3, #8
 8001faa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	611a      	str	r2, [r3, #16]
          break;
 8001fb2:	e009      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	615a      	str	r2, [r3, #20]
          break;
 8001fbe:	e003      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
          break;
 8001fc4:	e000      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          break;
 8001fc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2bff      	cmp	r3, #255	; 0xff
 8001fcc:	d801      	bhi.n	8001fd2 <HAL_GPIO_Init+0x13a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	e001      	b.n	8001fd6 <HAL_GPIO_Init+0x13e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2bff      	cmp	r3, #255	; 0xff
 8001fdc:	d802      	bhi.n	8001fe4 <HAL_GPIO_Init+0x14c>
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	e002      	b.n	8001fea <HAL_GPIO_Init+0x152>
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	3b08      	subs	r3, #8
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	210f      	movs	r1, #15
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	6a39      	ldr	r1, [r7, #32]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	431a      	orrs	r2, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 80b1 	beq.w	800217a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002018:	4b4d      	ldr	r3, [pc, #308]	; (8002150 <HAL_GPIO_Init+0x2b8>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a4c      	ldr	r2, [pc, #304]	; (8002150 <HAL_GPIO_Init+0x2b8>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6193      	str	r3, [r2, #24]
 8002024:	4b4a      	ldr	r3, [pc, #296]	; (8002150 <HAL_GPIO_Init+0x2b8>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002030:	4a48      	ldr	r2, [pc, #288]	; (8002154 <HAL_GPIO_Init+0x2bc>)
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	3302      	adds	r3, #2
 8002038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	220f      	movs	r2, #15
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a40      	ldr	r2, [pc, #256]	; (8002158 <HAL_GPIO_Init+0x2c0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d013      	beq.n	8002084 <HAL_GPIO_Init+0x1ec>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a3f      	ldr	r2, [pc, #252]	; (800215c <HAL_GPIO_Init+0x2c4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d00d      	beq.n	8002080 <HAL_GPIO_Init+0x1e8>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a3e      	ldr	r2, [pc, #248]	; (8002160 <HAL_GPIO_Init+0x2c8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d007      	beq.n	800207c <HAL_GPIO_Init+0x1e4>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a3d      	ldr	r2, [pc, #244]	; (8002164 <HAL_GPIO_Init+0x2cc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d101      	bne.n	8002078 <HAL_GPIO_Init+0x1e0>
 8002074:	2303      	movs	r3, #3
 8002076:	e006      	b.n	8002086 <HAL_GPIO_Init+0x1ee>
 8002078:	2304      	movs	r3, #4
 800207a:	e004      	b.n	8002086 <HAL_GPIO_Init+0x1ee>
 800207c:	2302      	movs	r3, #2
 800207e:	e002      	b.n	8002086 <HAL_GPIO_Init+0x1ee>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <HAL_GPIO_Init+0x1ee>
 8002084:	2300      	movs	r3, #0
 8002086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002088:	f002 0203 	and.w	r2, r2, #3
 800208c:	0092      	lsls	r2, r2, #2
 800208e:	4093      	lsls	r3, r2
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002096:	492f      	ldr	r1, [pc, #188]	; (8002154 <HAL_GPIO_Init+0x2bc>)
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	3302      	adds	r3, #2
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020b0:	4b2d      	ldr	r3, [pc, #180]	; (8002168 <HAL_GPIO_Init+0x2d0>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	492c      	ldr	r1, [pc, #176]	; (8002168 <HAL_GPIO_Init+0x2d0>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020be:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <HAL_GPIO_Init+0x2d0>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	4928      	ldr	r1, [pc, #160]	; (8002168 <HAL_GPIO_Init+0x2d0>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d006      	beq.n	80020e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020d8:	4b23      	ldr	r3, [pc, #140]	; (8002168 <HAL_GPIO_Init+0x2d0>)
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	4922      	ldr	r1, [pc, #136]	; (8002168 <HAL_GPIO_Init+0x2d0>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020e6:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_GPIO_Init+0x2d0>)
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	491e      	ldr	r1, [pc, #120]	; (8002168 <HAL_GPIO_Init+0x2d0>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d006      	beq.n	800210e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002100:	4b19      	ldr	r3, [pc, #100]	; (8002168 <HAL_GPIO_Init+0x2d0>)
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	4918      	ldr	r1, [pc, #96]	; (8002168 <HAL_GPIO_Init+0x2d0>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	608b      	str	r3, [r1, #8]
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800210e:	4b16      	ldr	r3, [pc, #88]	; (8002168 <HAL_GPIO_Init+0x2d0>)
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	43db      	mvns	r3, r3
 8002116:	4914      	ldr	r1, [pc, #80]	; (8002168 <HAL_GPIO_Init+0x2d0>)
 8002118:	4013      	ands	r3, r2
 800211a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d021      	beq.n	800216c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <HAL_GPIO_Init+0x2d0>)
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	490e      	ldr	r1, [pc, #56]	; (8002168 <HAL_GPIO_Init+0x2d0>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	60cb      	str	r3, [r1, #12]
 8002134:	e021      	b.n	800217a <HAL_GPIO_Init+0x2e2>
 8002136:	bf00      	nop
 8002138:	10320000 	.word	0x10320000
 800213c:	10310000 	.word	0x10310000
 8002140:	10220000 	.word	0x10220000
 8002144:	10210000 	.word	0x10210000
 8002148:	10120000 	.word	0x10120000
 800214c:	10110000 	.word	0x10110000
 8002150:	40021000 	.word	0x40021000
 8002154:	40010000 	.word	0x40010000
 8002158:	40010800 	.word	0x40010800
 800215c:	40010c00 	.word	0x40010c00
 8002160:	40011000 	.word	0x40011000
 8002164:	40011400 	.word	0x40011400
 8002168:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_GPIO_Init+0x304>)
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	43db      	mvns	r3, r3
 8002174:	4909      	ldr	r1, [pc, #36]	; (800219c <HAL_GPIO_Init+0x304>)
 8002176:	4013      	ands	r3, r2
 8002178:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	3301      	adds	r3, #1
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	fa22 f303 	lsr.w	r3, r2, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	f47f ae8e 	bne.w	8001eac <HAL_GPIO_Init+0x14>
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	372c      	adds	r7, #44	; 0x2c
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	40010400 	.word	0x40010400

080021a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	887b      	ldrh	r3, [r7, #2]
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	e001      	b.n	80021c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr

080021ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	807b      	strh	r3, [r7, #2]
 80021da:	4613      	mov	r3, r2
 80021dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021de:	787b      	ldrb	r3, [r7, #1]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e4:	887a      	ldrh	r2, [r7, #2]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021ea:	e003      	b.n	80021f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021ec:	887b      	ldrh	r3, [r7, #2]
 80021ee:	041a      	lsls	r2, r3, #16
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	611a      	str	r2, [r3, #16]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr

080021fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021fe:	b480      	push	{r7}
 8002200:	b085      	sub	sp, #20
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	460b      	mov	r3, r1
 8002208:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002210:	887a      	ldrh	r2, [r7, #2]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4013      	ands	r3, r2
 8002216:	041a      	lsls	r2, r3, #16
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	43d9      	mvns	r1, r3
 800221c:	887b      	ldrh	r3, [r7, #2]
 800221e:	400b      	ands	r3, r1
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	611a      	str	r2, [r3, #16]
}
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	4013      	ands	r3, r2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d006      	beq.n	8002254 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe ff02 	bl	8001058 <HAL_GPIO_EXTI_Callback>
  }
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40010400 	.word	0x40010400

08002260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e12b      	b.n	80024ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff fbf0 	bl	8001a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2224      	movs	r2, #36	; 0x24
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0201 	bic.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022c4:	f001 f918 	bl	80034f8 <HAL_RCC_GetPCLK1Freq>
 80022c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4a81      	ldr	r2, [pc, #516]	; (80024d4 <HAL_I2C_Init+0x274>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d807      	bhi.n	80022e4 <HAL_I2C_Init+0x84>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4a80      	ldr	r2, [pc, #512]	; (80024d8 <HAL_I2C_Init+0x278>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	bf94      	ite	ls
 80022dc:	2301      	movls	r3, #1
 80022de:	2300      	movhi	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	e006      	b.n	80022f2 <HAL_I2C_Init+0x92>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a7d      	ldr	r2, [pc, #500]	; (80024dc <HAL_I2C_Init+0x27c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	bf94      	ite	ls
 80022ec:	2301      	movls	r3, #1
 80022ee:	2300      	movhi	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0e7      	b.n	80024ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4a78      	ldr	r2, [pc, #480]	; (80024e0 <HAL_I2C_Init+0x280>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0c9b      	lsrs	r3, r3, #18
 8002304:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	430a      	orrs	r2, r1
 8002318:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4a6a      	ldr	r2, [pc, #424]	; (80024d4 <HAL_I2C_Init+0x274>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d802      	bhi.n	8002334 <HAL_I2C_Init+0xd4>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3301      	adds	r3, #1
 8002332:	e009      	b.n	8002348 <HAL_I2C_Init+0xe8>
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800233a:	fb02 f303 	mul.w	r3, r2, r3
 800233e:	4a69      	ldr	r2, [pc, #420]	; (80024e4 <HAL_I2C_Init+0x284>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	099b      	lsrs	r3, r3, #6
 8002346:	3301      	adds	r3, #1
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	430b      	orrs	r3, r1
 800234e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800235a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	495c      	ldr	r1, [pc, #368]	; (80024d4 <HAL_I2C_Init+0x274>)
 8002364:	428b      	cmp	r3, r1
 8002366:	d819      	bhi.n	800239c <HAL_I2C_Init+0x13c>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1e59      	subs	r1, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fbb1 f3f3 	udiv	r3, r1, r3
 8002376:	1c59      	adds	r1, r3, #1
 8002378:	f640 73fc 	movw	r3, #4092	; 0xffc
 800237c:	400b      	ands	r3, r1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_I2C_Init+0x138>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1e59      	subs	r1, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002390:	3301      	adds	r3, #1
 8002392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002396:	e051      	b.n	800243c <HAL_I2C_Init+0x1dc>
 8002398:	2304      	movs	r3, #4
 800239a:	e04f      	b.n	800243c <HAL_I2C_Init+0x1dc>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d111      	bne.n	80023c8 <HAL_I2C_Init+0x168>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1e58      	subs	r0, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6859      	ldr	r1, [r3, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	440b      	add	r3, r1
 80023b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b6:	3301      	adds	r3, #1
 80023b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	e012      	b.n	80023ee <HAL_I2C_Init+0x18e>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1e58      	subs	r0, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	0099      	lsls	r1, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	fbb0 f3f3 	udiv	r3, r0, r3
 80023de:	3301      	adds	r3, #1
 80023e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_Init+0x196>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e022      	b.n	800243c <HAL_I2C_Init+0x1dc>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10e      	bne.n	800241c <HAL_I2C_Init+0x1bc>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1e58      	subs	r0, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6859      	ldr	r1, [r3, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	440b      	add	r3, r1
 800240c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002410:	3301      	adds	r3, #1
 8002412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800241a:	e00f      	b.n	800243c <HAL_I2C_Init+0x1dc>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1e58      	subs	r0, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	0099      	lsls	r1, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002432:	3301      	adds	r3, #1
 8002434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	6809      	ldr	r1, [r1, #0]
 8002440:	4313      	orrs	r3, r2
 8002442:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69da      	ldr	r2, [r3, #28]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800246a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6911      	ldr	r1, [r2, #16]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68d2      	ldr	r2, [r2, #12]
 8002476:	4311      	orrs	r1, r2
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	430b      	orrs	r3, r1
 800247e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	000186a0 	.word	0x000186a0
 80024d8:	001e847f 	.word	0x001e847f
 80024dc:	003d08ff 	.word	0x003d08ff
 80024e0:	431bde83 	.word	0x431bde83
 80024e4:	10624dd3 	.word	0x10624dd3

080024e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	461a      	mov	r2, r3
 80024f4:	460b      	mov	r3, r1
 80024f6:	817b      	strh	r3, [r7, #10]
 80024f8:	4613      	mov	r3, r2
 80024fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff fbb4 	bl	8001c68 <HAL_GetTick>
 8002500:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b20      	cmp	r3, #32
 800250c:	f040 80e0 	bne.w	80026d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2319      	movs	r3, #25
 8002516:	2201      	movs	r2, #1
 8002518:	4970      	ldr	r1, [pc, #448]	; (80026dc <HAL_I2C_Master_Transmit+0x1f4>)
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fa92 	bl	8002a44 <I2C_WaitOnFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002526:	2302      	movs	r3, #2
 8002528:	e0d3      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_I2C_Master_Transmit+0x50>
 8002534:	2302      	movs	r3, #2
 8002536:	e0cc      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b01      	cmp	r3, #1
 800254c:	d007      	beq.n	800255e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0201 	orr.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800256c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2221      	movs	r2, #33	; 0x21
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2210      	movs	r2, #16
 800257a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	893a      	ldrh	r2, [r7, #8]
 800258e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4a50      	ldr	r2, [pc, #320]	; (80026e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025a0:	8979      	ldrh	r1, [r7, #10]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	6a3a      	ldr	r2, [r7, #32]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f9ca 	bl	8002940 <I2C_MasterRequestWrite>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e08d      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025cc:	e066      	b.n	800269c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	6a39      	ldr	r1, [r7, #32]
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 fb0c 	bl	8002bf0 <I2C_WaitOnTXEFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00d      	beq.n	80025fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d107      	bne.n	80025f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e06b      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	781a      	ldrb	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b04      	cmp	r3, #4
 8002636:	d11b      	bne.n	8002670 <HAL_I2C_Master_Transmit+0x188>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	d017      	beq.n	8002670 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	781a      	ldrb	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	6a39      	ldr	r1, [r7, #32]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fafc 	bl	8002c72 <I2C_WaitOnBTFFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00d      	beq.n	800269c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	2b04      	cmp	r3, #4
 8002686:	d107      	bne.n	8002698 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002696:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e01a      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d194      	bne.n	80025ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e000      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
  }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	00100002 	.word	0x00100002
 80026e0:	ffff0000 	.word	0xffff0000

080026e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	460b      	mov	r3, r1
 80026f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80026f4:	f7ff fab8 	bl	8001c68 <HAL_GetTick>
 80026f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80026fa:	2301      	movs	r3, #1
 80026fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b20      	cmp	r3, #32
 8002708:	f040 8111 	bne.w	800292e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	2319      	movs	r3, #25
 8002712:	2201      	movs	r2, #1
 8002714:	4988      	ldr	r1, [pc, #544]	; (8002938 <HAL_I2C_IsDeviceReady+0x254>)
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f994 	bl	8002a44 <I2C_WaitOnFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002722:	2302      	movs	r3, #2
 8002724:	e104      	b.n	8002930 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_I2C_IsDeviceReady+0x50>
 8002730:	2302      	movs	r3, #2
 8002732:	e0fd      	b.n	8002930 <HAL_I2C_IsDeviceReady+0x24c>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b01      	cmp	r3, #1
 8002748:	d007      	beq.n	800275a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 0201 	orr.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002768:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2224      	movs	r2, #36	; 0x24
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4a70      	ldr	r2, [pc, #448]	; (800293c <HAL_I2C_IsDeviceReady+0x258>)
 800277c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800278c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2200      	movs	r2, #0
 8002796:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f952 	bl	8002a44 <I2C_WaitOnFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00d      	beq.n	80027c2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b4:	d103      	bne.n	80027be <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e0b6      	b.n	8002930 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027c2:	897b      	ldrh	r3, [r7, #10]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80027d2:	f7ff fa49 	bl	8001c68 <HAL_GetTick>
 80027d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	bf0c      	ite	eq
 80027e6:	2301      	moveq	r3, #1
 80027e8:	2300      	movne	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fc:	bf0c      	ite	eq
 80027fe:	2301      	moveq	r3, #1
 8002800:	2300      	movne	r3, #0
 8002802:	b2db      	uxtb	r3, r3
 8002804:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002806:	e025      	b.n	8002854 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002808:	f7ff fa2e 	bl	8001c68 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d302      	bcc.n	800281e <HAL_I2C_IsDeviceReady+0x13a>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d103      	bne.n	8002826 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	22a0      	movs	r2, #160	; 0xa0
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b02      	cmp	r3, #2
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2ba0      	cmp	r3, #160	; 0xa0
 800285e:	d005      	beq.n	800286c <HAL_I2C_IsDeviceReady+0x188>
 8002860:	7dfb      	ldrb	r3, [r7, #23]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d102      	bne.n	800286c <HAL_I2C_IsDeviceReady+0x188>
 8002866:	7dbb      	ldrb	r3, [r7, #22]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0cd      	beq.n	8002808 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b02      	cmp	r3, #2
 8002880:	d129      	bne.n	80028d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002890:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2319      	movs	r3, #25
 80028ae:	2201      	movs	r2, #1
 80028b0:	4921      	ldr	r1, [pc, #132]	; (8002938 <HAL_I2C_IsDeviceReady+0x254>)
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 f8c6 	bl	8002a44 <I2C_WaitOnFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e036      	b.n	8002930 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e02c      	b.n	8002930 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2319      	movs	r3, #25
 80028f6:	2201      	movs	r2, #1
 80028f8:	490f      	ldr	r1, [pc, #60]	; (8002938 <HAL_I2C_IsDeviceReady+0x254>)
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f8a2 	bl	8002a44 <I2C_WaitOnFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e012      	b.n	8002930 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	3301      	adds	r3, #1
 800290e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	429a      	cmp	r2, r3
 8002916:	f4ff af32 	bcc.w	800277e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800292e:	2302      	movs	r3, #2
  }
}
 8002930:	4618      	mov	r0, r3
 8002932:	3720      	adds	r7, #32
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	00100002 	.word	0x00100002
 800293c:	ffff0000 	.word	0xffff0000

08002940 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af02      	add	r7, sp, #8
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	460b      	mov	r3, r1
 800294e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2b08      	cmp	r3, #8
 800295a:	d006      	beq.n	800296a <I2C_MasterRequestWrite+0x2a>
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d003      	beq.n	800296a <I2C_MasterRequestWrite+0x2a>
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002968:	d108      	bne.n	800297c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	e00b      	b.n	8002994 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	2b12      	cmp	r3, #18
 8002982:	d107      	bne.n	8002994 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002992:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f84f 	bl	8002a44 <I2C_WaitOnFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00d      	beq.n	80029c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ba:	d103      	bne.n	80029c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e035      	b.n	8002a34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029d0:	d108      	bne.n	80029e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029d2:	897b      	ldrh	r3, [r7, #10]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029e0:	611a      	str	r2, [r3, #16]
 80029e2:	e01b      	b.n	8002a1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029e4:	897b      	ldrh	r3, [r7, #10]
 80029e6:	11db      	asrs	r3, r3, #7
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	f003 0306 	and.w	r3, r3, #6
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	f063 030f 	orn	r3, r3, #15
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	490e      	ldr	r1, [pc, #56]	; (8002a3c <I2C_MasterRequestWrite+0xfc>)
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f875 	bl	8002af2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e010      	b.n	8002a34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a12:	897b      	ldrh	r3, [r7, #10]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	4907      	ldr	r1, [pc, #28]	; (8002a40 <I2C_MasterRequestWrite+0x100>)
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f865 	bl	8002af2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	00010008 	.word	0x00010008
 8002a40:	00010002 	.word	0x00010002

08002a44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	4613      	mov	r3, r2
 8002a52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a54:	e025      	b.n	8002aa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5c:	d021      	beq.n	8002aa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5e:	f7ff f903 	bl	8001c68 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d302      	bcc.n	8002a74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d116      	bne.n	8002aa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f043 0220 	orr.w	r2, r3, #32
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e023      	b.n	8002aea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	0c1b      	lsrs	r3, r3, #16
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d10d      	bne.n	8002ac8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf0c      	ite	eq
 8002abe:	2301      	moveq	r3, #1
 8002ac0:	2300      	movne	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	e00c      	b.n	8002ae2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bf0c      	ite	eq
 8002ada:	2301      	moveq	r3, #1
 8002adc:	2300      	movne	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d0b6      	beq.n	8002a56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b00:	e051      	b.n	8002ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b10:	d123      	bne.n	8002b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b20:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b2a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f043 0204 	orr.w	r2, r3, #4
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e046      	b.n	8002be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b60:	d021      	beq.n	8002ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b62:	f7ff f881 	bl	8001c68 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d302      	bcc.n	8002b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d116      	bne.n	8002ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f043 0220 	orr.w	r2, r3, #32
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e020      	b.n	8002be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	0c1b      	lsrs	r3, r3, #16
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d10c      	bne.n	8002bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bf14      	ite	ne
 8002bc2:	2301      	movne	r3, #1
 8002bc4:	2300      	moveq	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	e00b      	b.n	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	43da      	mvns	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf14      	ite	ne
 8002bdc:	2301      	movne	r3, #1
 8002bde:	2300      	moveq	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d18d      	bne.n	8002b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bfc:	e02d      	b.n	8002c5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 f878 	bl	8002cf4 <I2C_IsAcknowledgeFailed>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e02d      	b.n	8002c6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c14:	d021      	beq.n	8002c5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c16:	f7ff f827 	bl	8001c68 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d302      	bcc.n	8002c2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d116      	bne.n	8002c5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f043 0220 	orr.w	r2, r3, #32
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e007      	b.n	8002c6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c64:	2b80      	cmp	r3, #128	; 0x80
 8002c66:	d1ca      	bne.n	8002bfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c7e:	e02d      	b.n	8002cdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f837 	bl	8002cf4 <I2C_IsAcknowledgeFailed>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e02d      	b.n	8002cec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c96:	d021      	beq.n	8002cdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c98:	f7fe ffe6 	bl	8001c68 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d302      	bcc.n	8002cae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d116      	bne.n	8002cdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	f043 0220 	orr.w	r2, r3, #32
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e007      	b.n	8002cec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d1ca      	bne.n	8002c80 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0a:	d11b      	bne.n	8002d44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f043 0204 	orr.w	r2, r3, #4
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e272      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8087 	beq.w	8002e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d70:	4b92      	ldr	r3, [pc, #584]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d00c      	beq.n	8002d96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d7c:	4b8f      	ldr	r3, [pc, #572]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d112      	bne.n	8002dae <HAL_RCC_OscConfig+0x5e>
 8002d88:	4b8c      	ldr	r3, [pc, #560]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d94:	d10b      	bne.n	8002dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d96:	4b89      	ldr	r3, [pc, #548]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d06c      	beq.n	8002e7c <HAL_RCC_OscConfig+0x12c>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d168      	bne.n	8002e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e24c      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x76>
 8002db8:	4b80      	ldr	r3, [pc, #512]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a7f      	ldr	r2, [pc, #508]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	e02e      	b.n	8002e24 <HAL_RCC_OscConfig+0xd4>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x98>
 8002dce:	4b7b      	ldr	r3, [pc, #492]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a7a      	ldr	r2, [pc, #488]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	4b78      	ldr	r3, [pc, #480]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a77      	ldr	r2, [pc, #476]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	e01d      	b.n	8002e24 <HAL_RCC_OscConfig+0xd4>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df0:	d10c      	bne.n	8002e0c <HAL_RCC_OscConfig+0xbc>
 8002df2:	4b72      	ldr	r3, [pc, #456]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a71      	ldr	r2, [pc, #452]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	4b6f      	ldr	r3, [pc, #444]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a6e      	ldr	r2, [pc, #440]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e00b      	b.n	8002e24 <HAL_RCC_OscConfig+0xd4>
 8002e0c:	4b6b      	ldr	r3, [pc, #428]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a6a      	ldr	r2, [pc, #424]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a67      	ldr	r2, [pc, #412]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fe ff1c 	bl	8001c68 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fe ff18 	bl	8001c68 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	; 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e200      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	4b5d      	ldr	r3, [pc, #372]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0xe4>
 8002e52:	e014      	b.n	8002e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7fe ff08 	bl	8001c68 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7fe ff04 	bl	8001c68 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	; 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e1ec      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6e:	4b53      	ldr	r3, [pc, #332]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x10c>
 8002e7a:	e000      	b.n	8002e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d063      	beq.n	8002f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e8a:	4b4c      	ldr	r3, [pc, #304]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e96:	4b49      	ldr	r3, [pc, #292]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d11c      	bne.n	8002edc <HAL_RCC_OscConfig+0x18c>
 8002ea2:	4b46      	ldr	r3, [pc, #280]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d116      	bne.n	8002edc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eae:	4b43      	ldr	r3, [pc, #268]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x176>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d001      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e1c0      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	4b3d      	ldr	r3, [pc, #244]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4939      	ldr	r1, [pc, #228]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eda:	e03a      	b.n	8002f52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d020      	beq.n	8002f26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee4:	4b36      	ldr	r3, [pc, #216]	; (8002fc0 <HAL_RCC_OscConfig+0x270>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7fe febd 	bl	8001c68 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef2:	f7fe feb9 	bl	8001c68 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e1a1      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f04:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f10:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4927      	ldr	r1, [pc, #156]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	600b      	str	r3, [r1, #0]
 8002f24:	e015      	b.n	8002f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f26:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <HAL_RCC_OscConfig+0x270>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fe fe9c 	bl	8001c68 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f34:	f7fe fe98 	bl	8001c68 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e180      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f46:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d03a      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d019      	beq.n	8002f9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f66:	4b17      	ldr	r3, [pc, #92]	; (8002fc4 <HAL_RCC_OscConfig+0x274>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6c:	f7fe fe7c 	bl	8001c68 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f74:	f7fe fe78 	bl	8001c68 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e160      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <HAL_RCC_OscConfig+0x26c>)
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f92:	2001      	movs	r0, #1
 8002f94:	f000 fac4 	bl	8003520 <RCC_Delay>
 8002f98:	e01c      	b.n	8002fd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa0:	f7fe fe62 	bl	8001c68 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa6:	e00f      	b.n	8002fc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa8:	f7fe fe5e 	bl	8001c68 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d908      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e146      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	42420000 	.word	0x42420000
 8002fc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc8:	4b92      	ldr	r3, [pc, #584]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e9      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80a6 	beq.w	800312e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe6:	4b8b      	ldr	r3, [pc, #556]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10d      	bne.n	800300e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff2:	4b88      	ldr	r3, [pc, #544]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	4a87      	ldr	r2, [pc, #540]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	61d3      	str	r3, [r2, #28]
 8002ffe:	4b85      	ldr	r3, [pc, #532]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300a:	2301      	movs	r3, #1
 800300c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300e:	4b82      	ldr	r3, [pc, #520]	; (8003218 <HAL_RCC_OscConfig+0x4c8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d118      	bne.n	800304c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800301a:	4b7f      	ldr	r3, [pc, #508]	; (8003218 <HAL_RCC_OscConfig+0x4c8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a7e      	ldr	r2, [pc, #504]	; (8003218 <HAL_RCC_OscConfig+0x4c8>)
 8003020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003026:	f7fe fe1f 	bl	8001c68 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302e:	f7fe fe1b 	bl	8001c68 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b64      	cmp	r3, #100	; 0x64
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e103      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	4b75      	ldr	r3, [pc, #468]	; (8003218 <HAL_RCC_OscConfig+0x4c8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d106      	bne.n	8003062 <HAL_RCC_OscConfig+0x312>
 8003054:	4b6f      	ldr	r3, [pc, #444]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	4a6e      	ldr	r2, [pc, #440]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6213      	str	r3, [r2, #32]
 8003060:	e02d      	b.n	80030be <HAL_RCC_OscConfig+0x36e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10c      	bne.n	8003084 <HAL_RCC_OscConfig+0x334>
 800306a:	4b6a      	ldr	r3, [pc, #424]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	4a69      	ldr	r2, [pc, #420]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	6213      	str	r3, [r2, #32]
 8003076:	4b67      	ldr	r3, [pc, #412]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4a66      	ldr	r2, [pc, #408]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	f023 0304 	bic.w	r3, r3, #4
 8003080:	6213      	str	r3, [r2, #32]
 8003082:	e01c      	b.n	80030be <HAL_RCC_OscConfig+0x36e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b05      	cmp	r3, #5
 800308a:	d10c      	bne.n	80030a6 <HAL_RCC_OscConfig+0x356>
 800308c:	4b61      	ldr	r3, [pc, #388]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	4a60      	ldr	r2, [pc, #384]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003092:	f043 0304 	orr.w	r3, r3, #4
 8003096:	6213      	str	r3, [r2, #32]
 8003098:	4b5e      	ldr	r3, [pc, #376]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	4a5d      	ldr	r2, [pc, #372]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	6213      	str	r3, [r2, #32]
 80030a4:	e00b      	b.n	80030be <HAL_RCC_OscConfig+0x36e>
 80030a6:	4b5b      	ldr	r3, [pc, #364]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	4a5a      	ldr	r2, [pc, #360]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	f023 0301 	bic.w	r3, r3, #1
 80030b0:	6213      	str	r3, [r2, #32]
 80030b2:	4b58      	ldr	r3, [pc, #352]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	4a57      	ldr	r2, [pc, #348]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	f023 0304 	bic.w	r3, r3, #4
 80030bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d015      	beq.n	80030f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c6:	f7fe fdcf 	bl	8001c68 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030cc:	e00a      	b.n	80030e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ce:	f7fe fdcb 	bl	8001c68 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030dc:	4293      	cmp	r3, r2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e0b1      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e4:	4b4b      	ldr	r3, [pc, #300]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0ee      	beq.n	80030ce <HAL_RCC_OscConfig+0x37e>
 80030f0:	e014      	b.n	800311c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f2:	f7fe fdb9 	bl	8001c68 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f8:	e00a      	b.n	8003110 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fa:	f7fe fdb5 	bl	8001c68 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f241 3288 	movw	r2, #5000	; 0x1388
 8003108:	4293      	cmp	r3, r2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e09b      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003110:	4b40      	ldr	r3, [pc, #256]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1ee      	bne.n	80030fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800311c:	7dfb      	ldrb	r3, [r7, #23]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d105      	bne.n	800312e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003122:	4b3c      	ldr	r3, [pc, #240]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	4a3b      	ldr	r2, [pc, #236]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8087 	beq.w	8003246 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003138:	4b36      	ldr	r3, [pc, #216]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b08      	cmp	r3, #8
 8003142:	d061      	beq.n	8003208 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d146      	bne.n	80031da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314c:	4b33      	ldr	r3, [pc, #204]	; (800321c <HAL_RCC_OscConfig+0x4cc>)
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003152:	f7fe fd89 	bl	8001c68 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315a:	f7fe fd85 	bl	8001c68 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e06d      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316c:	4b29      	ldr	r3, [pc, #164]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1f0      	bne.n	800315a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003180:	d108      	bne.n	8003194 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003182:	4b24      	ldr	r3, [pc, #144]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	4921      	ldr	r1, [pc, #132]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003194:	4b1f      	ldr	r3, [pc, #124]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a19      	ldr	r1, [r3, #32]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	430b      	orrs	r3, r1
 80031a6:	491b      	ldr	r1, [pc, #108]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ac:	4b1b      	ldr	r3, [pc, #108]	; (800321c <HAL_RCC_OscConfig+0x4cc>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b2:	f7fe fd59 	bl	8001c68 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ba:	f7fe fd55 	bl	8001c68 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e03d      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCC_OscConfig+0x46a>
 80031d8:	e035      	b.n	8003246 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <HAL_RCC_OscConfig+0x4cc>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fe fd42 	bl	8001c68 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fe fd3e 	bl	8001c68 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e026      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031fa:	4b06      	ldr	r3, [pc, #24]	; (8003214 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x498>
 8003206:	e01e      	b.n	8003246 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d107      	bne.n	8003220 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e019      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
 8003214:	40021000 	.word	0x40021000
 8003218:	40007000 	.word	0x40007000
 800321c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_OscConfig+0x500>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	429a      	cmp	r2, r3
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d001      	beq.n	8003246 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000

08003254 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0d0      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003268:	4b6a      	ldr	r3, [pc, #424]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d910      	bls.n	8003298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b67      	ldr	r3, [pc, #412]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 0207 	bic.w	r2, r3, #7
 800327e:	4965      	ldr	r1, [pc, #404]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b63      	ldr	r3, [pc, #396]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0b8      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b0:	4b59      	ldr	r3, [pc, #356]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4a58      	ldr	r2, [pc, #352]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c8:	4b53      	ldr	r3, [pc, #332]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4a52      	ldr	r2, [pc, #328]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d4:	4b50      	ldr	r3, [pc, #320]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	494d      	ldr	r1, [pc, #308]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d040      	beq.n	8003374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d115      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e07f      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d107      	bne.n	8003322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003312:	4b41      	ldr	r3, [pc, #260]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e073      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003322:	4b3d      	ldr	r3, [pc, #244]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e06b      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003332:	4b39      	ldr	r3, [pc, #228]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f023 0203 	bic.w	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4936      	ldr	r1, [pc, #216]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003344:	f7fe fc90 	bl	8001c68 <HAL_GetTick>
 8003348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	e00a      	b.n	8003362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334c:	f7fe fc8c 	bl	8001c68 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e053      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003362:	4b2d      	ldr	r3, [pc, #180]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f003 020c 	and.w	r2, r3, #12
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	429a      	cmp	r2, r3
 8003372:	d1eb      	bne.n	800334c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003374:	4b27      	ldr	r3, [pc, #156]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d210      	bcs.n	80033a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b24      	ldr	r3, [pc, #144]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 0207 	bic.w	r2, r3, #7
 800338a:	4922      	ldr	r1, [pc, #136]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e032      	b.n	800340a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b0:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4916      	ldr	r1, [pc, #88]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	490e      	ldr	r1, [pc, #56]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033e2:	f000 f821 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80033e6:	4602      	mov	r2, r0
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	490a      	ldr	r1, [pc, #40]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80033f4:	5ccb      	ldrb	r3, [r1, r3]
 80033f6:	fa22 f303 	lsr.w	r3, r2, r3
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <HAL_RCC_ClockConfig+0x1cc>)
 80033fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033fe:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x1d0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fbee 	bl	8001be4 <HAL_InitTick>

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40022000 	.word	0x40022000
 8003418:	40021000 	.word	0x40021000
 800341c:	08003fa8 	.word	0x08003fa8
 8003420:	20000014 	.word	0x20000014
 8003424:	20000018 	.word	0x20000018

08003428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003428:	b490      	push	{r4, r7}
 800342a:	b08a      	sub	sp, #40	; 0x28
 800342c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800342e:	4b29      	ldr	r3, [pc, #164]	; (80034d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003430:	1d3c      	adds	r4, r7, #4
 8003432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003434:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003438:	f240 2301 	movw	r3, #513	; 0x201
 800343c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	2300      	movs	r3, #0
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003452:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b04      	cmp	r3, #4
 8003460:	d002      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x40>
 8003462:	2b08      	cmp	r3, #8
 8003464:	d003      	beq.n	800346e <HAL_RCC_GetSysClockFreq+0x46>
 8003466:	e02b      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003468:	4b1c      	ldr	r3, [pc, #112]	; (80034dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800346a:	623b      	str	r3, [r7, #32]
      break;
 800346c:	e02b      	b.n	80034c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	0c9b      	lsrs	r3, r3, #18
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	3328      	adds	r3, #40	; 0x28
 8003478:	443b      	add	r3, r7
 800347a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800347e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d012      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800348a:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	0c5b      	lsrs	r3, r3, #17
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	3328      	adds	r3, #40	; 0x28
 8003496:	443b      	add	r3, r7
 8003498:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800349c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	4a0e      	ldr	r2, [pc, #56]	; (80034dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80034a2:	fb03 f202 	mul.w	r2, r3, r2
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
 80034ae:	e004      	b.n	80034ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	4a0b      	ldr	r2, [pc, #44]	; (80034e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034b4:	fb02 f303 	mul.w	r3, r2, r3
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	623b      	str	r3, [r7, #32]
      break;
 80034be:	e002      	b.n	80034c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80034c2:	623b      	str	r3, [r7, #32]
      break;
 80034c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034c6:	6a3b      	ldr	r3, [r7, #32]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3728      	adds	r7, #40	; 0x28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc90      	pop	{r4, r7}
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	0800382c 	.word	0x0800382c
 80034d8:	40021000 	.word	0x40021000
 80034dc:	007a1200 	.word	0x007a1200
 80034e0:	003d0900 	.word	0x003d0900

080034e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e8:	4b02      	ldr	r3, [pc, #8]	; (80034f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	20000014 	.word	0x20000014

080034f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034fc:	f7ff fff2 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8003500:	4602      	mov	r2, r0
 8003502:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	4903      	ldr	r1, [pc, #12]	; (800351c <HAL_RCC_GetPCLK1Freq+0x24>)
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40021000 	.word	0x40021000
 800351c:	08003fb8 	.word	0x08003fb8

08003520 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003528:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <RCC_Delay+0x34>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <RCC_Delay+0x38>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	0a5b      	lsrs	r3, r3, #9
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	fb02 f303 	mul.w	r3, r2, r3
 800353a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800353c:	bf00      	nop
  }
  while (Delay --);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1e5a      	subs	r2, r3, #1
 8003542:	60fa      	str	r2, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1f9      	bne.n	800353c <RCC_Delay+0x1c>
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	20000014 	.word	0x20000014
 8003558:	10624dd3 	.word	0x10624dd3

0800355c <__libc_init_array>:
 800355c:	b570      	push	{r4, r5, r6, lr}
 800355e:	2600      	movs	r6, #0
 8003560:	4d0c      	ldr	r5, [pc, #48]	; (8003594 <__libc_init_array+0x38>)
 8003562:	4c0d      	ldr	r4, [pc, #52]	; (8003598 <__libc_init_array+0x3c>)
 8003564:	1b64      	subs	r4, r4, r5
 8003566:	10a4      	asrs	r4, r4, #2
 8003568:	42a6      	cmp	r6, r4
 800356a:	d109      	bne.n	8003580 <__libc_init_array+0x24>
 800356c:	f000 f87e 	bl	800366c <_init>
 8003570:	2600      	movs	r6, #0
 8003572:	4d0a      	ldr	r5, [pc, #40]	; (800359c <__libc_init_array+0x40>)
 8003574:	4c0a      	ldr	r4, [pc, #40]	; (80035a0 <__libc_init_array+0x44>)
 8003576:	1b64      	subs	r4, r4, r5
 8003578:	10a4      	asrs	r4, r4, #2
 800357a:	42a6      	cmp	r6, r4
 800357c:	d105      	bne.n	800358a <__libc_init_array+0x2e>
 800357e:	bd70      	pop	{r4, r5, r6, pc}
 8003580:	f855 3b04 	ldr.w	r3, [r5], #4
 8003584:	4798      	blx	r3
 8003586:	3601      	adds	r6, #1
 8003588:	e7ee      	b.n	8003568 <__libc_init_array+0xc>
 800358a:	f855 3b04 	ldr.w	r3, [r5], #4
 800358e:	4798      	blx	r3
 8003590:	3601      	adds	r6, #1
 8003592:	e7f2      	b.n	800357a <__libc_init_array+0x1e>
 8003594:	08003fe8 	.word	0x08003fe8
 8003598:	08003fe8 	.word	0x08003fe8
 800359c:	08003fe8 	.word	0x08003fe8
 80035a0:	08003fec 	.word	0x08003fec

080035a4 <__itoa>:
 80035a4:	1e93      	subs	r3, r2, #2
 80035a6:	2b22      	cmp	r3, #34	; 0x22
 80035a8:	b510      	push	{r4, lr}
 80035aa:	460c      	mov	r4, r1
 80035ac:	d904      	bls.n	80035b8 <__itoa+0x14>
 80035ae:	2300      	movs	r3, #0
 80035b0:	461c      	mov	r4, r3
 80035b2:	700b      	strb	r3, [r1, #0]
 80035b4:	4620      	mov	r0, r4
 80035b6:	bd10      	pop	{r4, pc}
 80035b8:	2a0a      	cmp	r2, #10
 80035ba:	d109      	bne.n	80035d0 <__itoa+0x2c>
 80035bc:	2800      	cmp	r0, #0
 80035be:	da07      	bge.n	80035d0 <__itoa+0x2c>
 80035c0:	232d      	movs	r3, #45	; 0x2d
 80035c2:	700b      	strb	r3, [r1, #0]
 80035c4:	2101      	movs	r1, #1
 80035c6:	4240      	negs	r0, r0
 80035c8:	4421      	add	r1, r4
 80035ca:	f000 f80d 	bl	80035e8 <__utoa>
 80035ce:	e7f1      	b.n	80035b4 <__itoa+0x10>
 80035d0:	2100      	movs	r1, #0
 80035d2:	e7f9      	b.n	80035c8 <__itoa+0x24>

080035d4 <itoa>:
 80035d4:	f7ff bfe6 	b.w	80035a4 <__itoa>

080035d8 <memset>:
 80035d8:	4603      	mov	r3, r0
 80035da:	4402      	add	r2, r0
 80035dc:	4293      	cmp	r3, r2
 80035de:	d100      	bne.n	80035e2 <memset+0xa>
 80035e0:	4770      	bx	lr
 80035e2:	f803 1b01 	strb.w	r1, [r3], #1
 80035e6:	e7f9      	b.n	80035dc <memset+0x4>

080035e8 <__utoa>:
 80035e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ea:	b08b      	sub	sp, #44	; 0x2c
 80035ec:	4605      	mov	r5, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	466e      	mov	r6, sp
 80035f2:	4c1d      	ldr	r4, [pc, #116]	; (8003668 <__utoa+0x80>)
 80035f4:	f104 0c20 	add.w	ip, r4, #32
 80035f8:	4637      	mov	r7, r6
 80035fa:	6820      	ldr	r0, [r4, #0]
 80035fc:	6861      	ldr	r1, [r4, #4]
 80035fe:	3408      	adds	r4, #8
 8003600:	c703      	stmia	r7!, {r0, r1}
 8003602:	4564      	cmp	r4, ip
 8003604:	463e      	mov	r6, r7
 8003606:	d1f7      	bne.n	80035f8 <__utoa+0x10>
 8003608:	7921      	ldrb	r1, [r4, #4]
 800360a:	6820      	ldr	r0, [r4, #0]
 800360c:	7139      	strb	r1, [r7, #4]
 800360e:	1e91      	subs	r1, r2, #2
 8003610:	2922      	cmp	r1, #34	; 0x22
 8003612:	6038      	str	r0, [r7, #0]
 8003614:	f04f 0100 	mov.w	r1, #0
 8003618:	d904      	bls.n	8003624 <__utoa+0x3c>
 800361a:	7019      	strb	r1, [r3, #0]
 800361c:	460b      	mov	r3, r1
 800361e:	4618      	mov	r0, r3
 8003620:	b00b      	add	sp, #44	; 0x2c
 8003622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003624:	1e58      	subs	r0, r3, #1
 8003626:	4684      	mov	ip, r0
 8003628:	fbb5 f7f2 	udiv	r7, r5, r2
 800362c:	fb02 5617 	mls	r6, r2, r7, r5
 8003630:	3628      	adds	r6, #40	; 0x28
 8003632:	446e      	add	r6, sp
 8003634:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003638:	460c      	mov	r4, r1
 800363a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800363e:	462e      	mov	r6, r5
 8003640:	42b2      	cmp	r2, r6
 8003642:	463d      	mov	r5, r7
 8003644:	f101 0101 	add.w	r1, r1, #1
 8003648:	d9ee      	bls.n	8003628 <__utoa+0x40>
 800364a:	2200      	movs	r2, #0
 800364c:	545a      	strb	r2, [r3, r1]
 800364e:	1919      	adds	r1, r3, r4
 8003650:	1aa5      	subs	r5, r4, r2
 8003652:	42aa      	cmp	r2, r5
 8003654:	dae3      	bge.n	800361e <__utoa+0x36>
 8003656:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800365a:	780e      	ldrb	r6, [r1, #0]
 800365c:	3201      	adds	r2, #1
 800365e:	7006      	strb	r6, [r0, #0]
 8003660:	f801 5901 	strb.w	r5, [r1], #-1
 8003664:	e7f4      	b.n	8003650 <__utoa+0x68>
 8003666:	bf00      	nop
 8003668:	08003fc0 	.word	0x08003fc0

0800366c <_init>:
 800366c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366e:	bf00      	nop
 8003670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003672:	bc08      	pop	{r3}
 8003674:	469e      	mov	lr, r3
 8003676:	4770      	bx	lr

08003678 <_fini>:
 8003678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367a:	bf00      	nop
 800367c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800367e:	bc08      	pop	{r3}
 8003680:	469e      	mov	lr, r3
 8003682:	4770      	bx	lr
